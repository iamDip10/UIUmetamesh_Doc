{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \"Introducing 'UIU Metamesh,' a ground-breaking initiative aimed to streamline the campus connection. This cutting-edge website acts as a vibrant center where instructors and students can easily exchange ideas, ask for assistance, post urgent updates, and even look for employment openings. By incorporating a strong club administration system, \"UIU Metamesh\" goes above and beyond traditional communication platforms, encouraging cooperation and interaction among diverse university groups. 'UIU Metamesh' transforms the campus experience by empowering and connecting the entire university community with features like personalized chats and a lively community.\" Features Unified Communication Hub: UIU Metamesh serves as a centralized platform for all communication needs within the university, bringing together students, faculty, and staff in one comprehensive hub. Thought Sharing: Users can share thoughts, ideas, and announcements, fostering a collaborative environment where information flows seamlessly across the campus community. Help-Seeking Posts: The platform allows users to seek help or guidance on academic or personal matters, creating a supportive network where individuals can assist each other. Urgent Posts: Important and time-sensitive updates can be posted instantly, ensuring that critical information reaches the community promptly. Job Postings: Job opportunities, internships, and career-related information can be shared, connecting students with valuable professional prospects. Personalized Chats: UIU Metamesh offers a personalized messaging feature, enabling direct communication between users for more focused and private interactions. Club Management System: The integration of a club management system streamlines the administration of university clubs, facilitating better organization and participation. Community Building: The platform emphasizes community building, allowing users to connect, interact, and engage with others who share common interests, academic pursuits, or extracurricular activities. Campus-wide Connectivity: UIU Metamesh ensures that every corner of the campus stays connected, breaking down communication barriers and promoting a sense of unity among students and faculty. User-Friendly Interface: With an intuitive and user-friendly interface, UIU Metamesh makes navigation easy for users of all technical backgrounds, promoting widespread adoption across the university community.","title":"Home"},{"location":"#introduction","text":"\"Introducing 'UIU Metamesh,' a ground-breaking initiative aimed to streamline the campus connection. This cutting-edge website acts as a vibrant center where instructors and students can easily exchange ideas, ask for assistance, post urgent updates, and even look for employment openings. By incorporating a strong club administration system, \"UIU Metamesh\" goes above and beyond traditional communication platforms, encouraging cooperation and interaction among diverse university groups. 'UIU Metamesh' transforms the campus experience by empowering and connecting the entire university community with features like personalized chats and a lively community.\"","title":"Introduction"},{"location":"#features","text":"Unified Communication Hub: UIU Metamesh serves as a centralized platform for all communication needs within the university, bringing together students, faculty, and staff in one comprehensive hub. Thought Sharing: Users can share thoughts, ideas, and announcements, fostering a collaborative environment where information flows seamlessly across the campus community. Help-Seeking Posts: The platform allows users to seek help or guidance on academic or personal matters, creating a supportive network where individuals can assist each other. Urgent Posts: Important and time-sensitive updates can be posted instantly, ensuring that critical information reaches the community promptly. Job Postings: Job opportunities, internships, and career-related information can be shared, connecting students with valuable professional prospects. Personalized Chats: UIU Metamesh offers a personalized messaging feature, enabling direct communication between users for more focused and private interactions. Club Management System: The integration of a club management system streamlines the administration of university clubs, facilitating better organization and participation. Community Building: The platform emphasizes community building, allowing users to connect, interact, and engage with others who share common interests, academic pursuits, or extracurricular activities. Campus-wide Connectivity: UIU Metamesh ensures that every corner of the campus stays connected, breaking down communication barriers and promoting a sense of unity among students and faculty. User-Friendly Interface: With an intuitive and user-friendly interface, UIU Metamesh makes navigation easy for users of all technical backgrounds, promoting widespread adoption across the university community.","title":"Features"},{"location":"coding_document/","text":"About the part It is a document of how we develop the system's core functionality. Here we will try to describe each implementation with proper codebase. Authenticated System by 011201145 When a user enters our system then he/she must be a valid user. For validating, a user have to register our system. Our register system has ID Verification system to authenticate the right user. After authenticating, the user must have to login to our system by his/her user id and password. Backend of Validation and Session The Django view functions \"post_sign\", \"validate_user\" and \"logout,\" handle user registration, user authentication and logout functionality, respectively. In \"post_sign\", using POST method all necessary data are being gethered and pass to database for completing registration. def post_sign(req): if req.method == \"POST\": s_id = req.POST['mail'] fname = req.POST['fname'] lname = req.POST['lname'] password = req.POST['pass'] dept = req.POST['dept'] batch = req.POST['batch'] phn = req.POST['phn'] student = students(stu_id = s_id, firstName = fname, lastName = lname, password = password, batch = batch, dept = dept, phone_number = phn) student.save() return redirect('login') return render(\"signup\") In \"validate_user\" upon receiving a POST request with user credentials, the function retrieves the corresponding student object from the database. If the object exists and the entered password matches, it sets the user's status to active, saves the changes, and creates a session to validate the user. It then redirects the user to the dashboard page. def validate_user (req) : if req.method == \"POST\": __id = req.POST['email'] __pass = req.POST['pass'] objj = students.objects.get(stu_id = __id) print(objj) if (objj and objj.password == __pass): objj.active = \"true\" objj.save() req.session['validate'] = objj.stu_id encrp = signing.dumps(objj.stu_id, key=key) return redirect('dashb', user=encrp) return render(req, \"index.html\") On the other hand, \"logout\" checks if a user is currently validated in the session. If so, it deactivates the user, saves the changes, and flushes the session, effectively logging the user out. The function then redirects the user to the login page. def logout(req, user): if 'validate' in req.session: obj = students.objects.get(stu_id = user) obj.active = 'false' obj.save() req.session.flush() return redirect('login') AJAX Implementation for validating Email and Auto-fill If the email is validate correctly then from the email student ID, Batch and Department are being fetched and auto fill the necessary fields during registration. <script> function __validity() { let text__ = document.getElementById('email').value; let batch = document.getElementById('batch'); let dpet = document.getElementById('dept'); let btn = document.getElementById('sub'); let loading = document.getElementById('loading'); dpet.value = \"\"; batch.value = \"\"; document.getElementById('email').style.borderColor = \"\"; if (!text__.includes('@bscse.uiu.ac.bd') && !text__.includes('@bseee.uiu.ac.bd')) { document.getElementById('email').style.borderColor = \"red\"; btn.disabled = true; } else { loading.style.display = \"block\"; let xhr = new XMLHttpRequest(); xhr.open('GET', 'validate_email.php?email=' + text__, true); xhr.onreadystatechange = function () { if (xhr.readyState == 4 && xhr.status == 200) { loading.style.display = \"none\"; let response = JSON.parse(xhr.responseText); if (response.valid) { btn.disabled = false; document.getElementById('email').style.borderColor = \"green\"; let val = text__.split(\"@\"); batch.value = \"011\" + val[0].match(/[0-9]/g).join(''); if (text__.includes('@bscse.uiu.ac.bd')) { dpet.value = \"Computer Science and Engineering\"; } else if (text__.includes('@bseee.uiu.ac.bd')) { dpet.value = \"Electrical and Electronics Engineering\"; } } else { document.getElementById('email').style.borderColor = \"red\"; btn.disabled = true; } } }; xhr.send(); } } </script> Creating and Publishing Posts by 011201148 Here a user can create and publish a post to the community to get help. Here a user can select a category so that others can easily filter out a particular post. The categories are: Help , Job , Seeking , Urgent , Club . Frontend The provided HTML code represents a form for creating posts on a web page. It is designed as a modal, with a button likely triggering its display. The form includes a textarea for the post content and a dropdown menu for selecting the post category (e.g., Urgent, Help, Club, Job, Seeking Post). There is also a \"Publish\" button to submit the post. The modal has a distinct style, positioned on the right side of the page, initially hidden and revealed when needed. Overall, it provides a user-friendly interface for users to compose and categorize posts. <div class=\"w-1/3 absolute h-2/3 bg-gray-100 mt-28 shadow-2xl rounded-2xl flex flex-col\" id=\"post\" style=\"margin-left:75vh; display:none;\"> <div class=\"w-full h-20 flex justify-center items-center text-xl font-bold\"> <h1>Create Post</h1> </div> <div class=\"w-full flex flex-col items-center mt-1 \"> <form action=\"{% url 'postit' user=enp %}\" method=\"POST\" class=\"flex flex-col\"> {% csrf_token %} <textarea name=\"post\" class=\"rounded-2xl px-10 py-7 text-md\" id=\"\" cols=\"50\" rows=\"15\" style=\"resize:none\"></textarea> <div class=\"w-full flex justify-between mt-3\"> <select name=\"cat\" id=\"\" class=\"w-1/3 flex items-center text-center rounded-2xl\"> <option value=\"urgent\">Urgent</option> <option value=\"help\">Help</option> <option value=\"club\">Club</option> <option value=\"job\">Job</option> <option value=\"seek\">Seeking Post</option> </select> <input type=\"submit\" name=\"sub\" id=\"\" value=\"Publish\" class=\"w-24 rounded-2xl bg-orange-400 h-12 bg-black\"> </div> </form> </div> </div> Backend The postText function handles the posting of text content on a platform, likely a social media or discussion forum. It first checks if the user session has a 'validate' key. If validated, it decrypts the user ID, retrieves the corresponding student object, and processes a POST request. The function extracts the posted text, category, and generates a unique ID based on the student ID and current timestamp. A new post object is then created and saved to the database. Finally, the function redirects the user to a dashboard view if validated; otherwise, it redirects to the login page. def postText(req, user): if 'validate' in req.session: encrp = signing.loads(user, key=key) _obj = students.objects.get(stu_id = encrp) if req.method == \"POST\": text = req.POST['post'] stu = _obj cat = req.POST['cat'] idd = _obj.stu_id + \"-\" + datetime.now().strftime(\"%d-%m-%Y-%H-%M-%S\") object = posts(text = text, student = stu, category = cat, iid = idd) object.save() return redirect('dashb', user=user) else: return redirect('login') Moreover a user can upvote and comment on particular posts. Frontend <div class=\"w-full h-10 flex mb-5 justify-center items-center\"> <div class=\"w-1/2 h-full flex\"> <button id=\"{{posts.iid}}\" data-user=\"{{user.stu_id}}\" data-post=\"{{posts.iid}}\" data-csrf='{% csrf_token %}' class=\"vote w-full h-full flex items-center justify-center rounded-2xl hover:text-orange-500 hover:font-bold\" data-enp=\"{{enp}}\"> <svg class=\"w-6 h-6 text-gray-800 dark:text-white\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 20\"> <path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"0.9\" d=\"M4.008 8.714c1-.097 1.96-.45 2.792-1.028a25.112 25.112 0 0 0 4.454-5.72 1.8 1.8 0 0 1 .654-.706 1.742 1.742 0 0 1 1.65-.098 1.82 1.82 0 0 1 .97 1.128c.075.248.097.51.065.767l-1.562 4.629M4.008 8.714H1v9.257c0 .273.106.535.294.728a.99.99 0 0 0 .709.301h1.002a.99.99 0 0 0 .71-.301c.187-.193.293-.455.293-.728V8.714Zm8.02-1.028h4.968c.322 0 .64.08.925.232.286.153.531.374.716.645a2.108 2.108 0 0 1 .242 1.883l-2.36 7.2c-.288.813-.48 1.354-1.884 1.354-2.59 0-5.39-1.06-7.504-1.66\"/> </svg> <h3 class=\"ml-2\">Upvote</h3> </button> </div> <div class=\"w-1/2 h-full flex items-center justify-center\"> <input type=\"text\" name=\"comnt\" id=\"{{posts.iid}}\" placeholder=\"Enter a comment\" class=\"koment ml-8 rounded-2xl\"> <button class=\"cmnt w-full h-full flex justify-center items-center hover:text-orange-500\" data-csrrf='{% csrf_token %}' data-postid=\"{{posts.iid}}\" data-enp=\"{{enp}}\" data-user=\"{{user.stu_id}}\" > Comment </button> </div> </div> Backend for Upvoting The provided Django view function, \"likeit\" handles the upvoting mechanism for posts on a web platform. Upon receiving a POST request, the function extracts the relevant information, including the user and post IDs. It increments the upvote count of the corresponding post and saves the updated information. Additionally, it checks whether the user has previously upvoted the post. If yes, it updates the existing like entry; otherwise, it creates a new like entry in the database. Finally, the function generates a notification message indicating the user's upvote action and saves it in the notifications database. The function then redirects the user to the dashboard page. Same goes for Commenting backend. def likeit(req): if 'validate' in req.session: if req.method == 'POST': print(req.POST.get('post_id')) user = students.objects.get(stu_id = req.POST.get('user')) post_obj = posts.objects.get(iid = req.POST.get('post_id')) post_obj.upvote = int(post_obj.upvote) + 1 post_obj.save() if likes.objects.filter(post=post_obj, user=user).exists(): likeobj = likes.objects.get(post=post_obj, user=user) likeobj.counter = post_obj.upvote likeobj.save() else: like = likes(counter = post_obj.upvote, post = post_obj, user = students.objects.get(stu_id = req.POST.get('user'))) like.save() message = user.firstName + \" \" + user.lastName + \" has upvoted your post.\" notificat = notification(message = message, to=post_obj.student) notificat.save() print(\"Hello\" + post_obj) return redirect('dashb', user=req.POST.get('enpp')) else: return redirect('login') Backend for Commenting def comment(req, user): der = signing.loads(user, key=key) obj = students.objects.get(stu_id = der) comnt = req.POST.get('cmnt') postid = req.POST.get('postid') pst = posts.objects.get(iid = postid) if likes.objects.filter(post=pst, user=obj).exists(): print(comnt) likeobj = likes.objects.get(post=pst, user=obj) likeobj.comment = comnt likeobj.save() else: cmntobj = likes(post=pst, user=obj, comment=comnt) cmntobj.save() msg = obj.firstName + \" \" + obj.lastName + \" has commented on your posts.\" notiobj = notification(message=msg, to=pst.student) notiobj.save() return HttpResponse(status=204) AJAX Implementation for real-time Like and Comment //Upvote $(document).ready(function() { $('.cmnt').on('click', function() { let postid = $(this).data('postid') ; let enpp = $(this).data(\"enp\"); let user = $(this).data(\"user\") ; let commentt = $(this).siblings('.koment').val() ; let cssrf = $('[name=csrfmiddlewaretoken]').val(); $(this).siblings('.koment').val(\"\") ; console.log(commentt); $.ajax({ type: \"POST\" , url: \"{% url 'commentit' user=enp %}\", data:{ csrfmiddlewaretoken: cssrf, postid:postid, cmnt: commentt, }, success: function() { console.log(commentt) ; } }); }); }); //Comment $(document).ready(function() { $('.cmnt').on('click', function() { let postid = $(this).data('postid') ; let enpp = $(this).data(\"enp\"); let user = $(this).data(\"user\") ; let commentt = $(this).siblings('.koment').val() ; let cssrf = $('[name=csrfmiddlewaretoken]').val(); $(this).siblings('.koment').val(\"\") ; console.log(commentt); $.ajax({ type: \"POST\" , url: \"{% url 'commentit' user=enp %}\", data:{ csrfmiddlewaretoken: cssrf, postid:postid, cmnt: commentt, }, success: function() { console.log(commentt) ; } }); }); }); Post Categorization by 011201171 Here a user can filter out specific categorized posts in thier feed. A user just need to select the category and the feed will than show the result of specific categorized posts with real time manner. AJAX Implementation for Real-time Categorization The provided AJAX snippet listens for changes in the element with the ID \"change.\" When a change occurs, it retrieves the selected value from this element. Subsequently, it initiates an AJAX request to the server using the URL specified in the 'url' attribute. The data parameter includes the selected value ('cat') as part of the request. Upon successful completion of the AJAX request, the function specified in the 'success' attribute is executed. In this case, it takes the received data and updates the HTML content of the element with the ID \"postt\" using the $(\"#postt\").html(data) statement. This code snippet is likely part of a feature that dynamically updates content on a webpage based on user interactions. $(\"#change\").change(function() { var val = $(this).val() ; $.ajax({ url: \"{% url 'categorize' user=enp %}\", data: { 'cat':val, }, success: function(data){ $(\"#postt\").html(data) ; } }); }) ; There is a seperate .html template for categorization. This file will be passed on $(\"#postt\").html(data) as data and show the responeses. {% for posts in post %} <div class=\"w-full h-fit flex flex-col rounded-2xl bg-orange-100 px-8 mt-6 mb-5\" > <div class=\"w-full h-20 flex items-center\"> <img src=\"\" alt=\"\" class=\"w-12 h-12 rounded-full bg-black\" /> <div class=\"w-2/3 h-fit flex flex-col\"> <h3 class=\"ml-2 text-md font-bold\"> {{posts.student.firstName|add:\" \"|add:posts.student.lastName}} </h3> <div class=\"ml-2 w-full h-fit flex items-center\"> <h3 class=\"\">{{posts.student.stu_id}}</h3> <div class=\"ml-2 w-20 h-fit bg-orange-400 rounded-2xl flex justify-center text-white\" > <p class=\"font-bold\">{{posts.category}}</p> </div> </div> </div> </div> <div class=\"w-full h-fit mt-2 mb-6\"> <p>{{posts.text}}</p> </div> <div class=\"w-full h-10 flex mb-5 justify-center items-center\"> <div class=\"w-1/2 h-full flex\"> <button id=\"{{posts.iid}}\" data-user=\"{{user.stu_id}}\" data-post=\"{{posts.iid}}\" data-csrf='{% csrf_token %}' class=\"vote w-full h-full flex items-center justify-center rounded-2xl hover:text-orange-500 hover:font-bold\" data-enp=\"{{enp}}\" > <svg class=\"w-6 h-6 text-gray-800 dark:text-white\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 20\" > <path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"0.9\" d=\"M4.008 8.714c1-.097 1.96-.45 2.792-1.028a25.112 25.112 0 0 0 4.454-5.72 1.8 1.8 0 0 1 .654-.706 1.742 1.742 0 0 1 1.65-.098 1.82 1.82 0 0 1 .97 1.128c.075.248.097.51.065.767l-1.562 4.629M4.008 8.714H1v9.257c0 .273.106.535.294.728a.99.99 0 0 0 .709.301h1.002a.99.99 0 0 0 .71-.301c.187-.193.293-.455.293-.728V8.714Zm8.02-1.028h4.968c.322 0 .64.08.925.232.286.153.531.374.716.645a2.108 2.108 0 0 1 .242 1.883l-2.36 7.2c-.288.813-.48 1.354-1.884 1.354-2.59 0-5.39-1.06-7.504-1.66\" /> </svg> <h3 class=\"ml-2\">Upvote</h3> </button> </div> <div class=\"w-1/2 h-full flex\"> <form class=\"w-full h-full flex items-center justify-center\" method=\"post\" action=\"\" > {% csrf_token %} <input type=\"text\" name=\"comnt\" id=\"\" data-csrrf='{% csrf_token %}' data-postid=\"{{posts.iid}}\" data-enp=\"{{enp}}\" data-user=\"{{user.stu_id}}\" placeholder=\"Enter a comment\" class=\"comnt ml-8 rounded-2xl\" /> <button class=\"w-full h-full flex justify-center items-center hover:text-orange-500\" > Comment </button> </form> </div> </div> </div> {% endfor %} In Backend , the provided Django view function, \"categorize\" handles a request by extracting the user information from the session, retrieving the corresponding student object from the database, and filtering posts based on a specified category received through the request's GET parameters. The filtered posts are then passed to the 'categorize.html' template along with user and student information. This view is likely part of a system that dynamically categorizes and displays posts based on user interactions. def categorize(req, user): userr = signing.loads(user, key=key) obj = students.objects.get(stu_id = userr) filtr = posts.objects.filter(category = req.GET.get('cat')) print(req.GET.get('cat'), filtr) data = { 'post':filtr, 'enp':user, 'stu':obj, } return render(req, \"categorize.html\", data) Notification System by 011201145 There is a notification system which used to notify all kind of activities such as upvoted posts, comment in a post, any club activities and so on. <div class=\"w-4/5 bg-gray-100 mt-8 flex flex-col rounded-2xl px-4 overflow-y-auto\" style=\"height: 50vh;\"> <h3 class=\"w-1/2 h-fit text-xl mt-6 font-bold text-gray-500\">Notification</h3> {% for notis in noti %} <div class=\"w-full mt-4 h-20 bg-gray-300 rounded-xl flex px-6\"> <svg class=\"w-10 h-30 text-gray-800 dark:text-white\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 21\"> <path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"0.9\" d=\"M10 3.464V1.1m0 2.365a5.338 5.338 0 0 1 5.133 5.368v1.8c0 2.386 1.867 2.982 1.867 4.175C17 15.4 17 16 16.462 16H3.538C3 16 3 15.4 3 14.807c0-1.193 1.867-1.789 1.867-4.175v-1.8A5.338 5.338 0 0 1 10 3.464ZM4 3 3 2M2 7H1m15-4 1-1m1 5h1M6.54 16a3.48 3.48 0 0 0 6.92 0H6.54Z\"/> </svg> <div class=\"w-full h-full flex items-center ml-5\"> <h3>{{notis.message}}</h3> </div> </div> {% endfor %} </div> The Django view function \"dashboard\" handles a request to display the user dashboard. It checks for session validation, retrieves notifications for the logged-in user from the database, and includes the notifications in the data passed to the 'dashboard.html' template. This is likely part of a web application where users can view their personalized dashboard with notifications. def dashboard(req, user): if 'validate' in req.session: ... noti = notification.objects.filter(to = __obj) ... data = { ... 'noti': noti, ... } return render(req, 'dashboard.html', data) else: return redirect('login') When a user interact, the system capture the interaction as message and save it to Notification database. For example, when a user upvote a post: message = user.firstName + \" \" + user.lastName + \" has upvoted your post.\" notificat = notification(message = message, to=post_obj.student) notificat.save() This is how the notification system works. Real-time Chat System by 011201171 A user can chat or message any one who are a part of our system. There is a pop-up UI for chat system where available users and previous chats are displayed. <div id=\"pops\" class=\"absolute w-full h-full flex justify-center items-center\" style=\"display: none; background-color: rgba(94, 94, 94, 0.7);\"> <div class=\"w-2/3 h-3/4 flex bg-white rounded-3xl px-5\" style=\"padding-top: 10px;\"> <div class=\"w-1/3 h-full flex flex-col\"> <div class=\"w-full flex justify-center items-center bg-gray-100 rounded-3xl\" style=\"height: 10vh;\"> <p class=\"text-2xl font-bold\">Chats</p> </div> <div id=\"listdiv\" class=\"w-full h-5/6 flex flex-col items-center rounded-2xl\"> {% for sts in all %} {% if sts != user %} <div onclick=\"popmsgg('{{sts.stu_id}}', '{{sts.firstName}}', '{{sts.lastName}}')\" class=\"w-full rounded-2xl mt-4 flex bg-orange-300 items-center px-8\" style=\"height: 6vh;\"> {% if sts.profpic.url != \"\" %} <img src=\"{{sts.profpic.url}}\" alt=\"\" class=\"object-cover rounded-full w-12 h-12\" style=\"margin-right: 1vh;\"> {% else %} <img src=\"\" alt=\"\" class=\"object-cover rounded-full w-12 h-12 bg-black\" style=\"margin-right: 1vh;\"> {% endif %} <p class=\"ml-4\">{{sts.firstName|add:\" \"|add:sts.lastName}}</p> </div> {% endif %} {% endfor %} </div> </div> <div class=\"w-2/3 h-full flex\"> <div class=\"w-full h-full flex flex-col px-4\" style=\"padding-bottom: 3vh;\"> <div class=\"w-full bg-gray-100 flex flex-col justify-center px-8 rounded-2xl\" style=\"height: 8vh;\"> <p class=\"text-xl\" id=\"nn\"></p> <p>Active now</p> </div> <div class=\"w-full h-full flex flex-col\" style=\"padding: 2vh 0 0 0;\"> <div id=\"showmsg\" class=\"w-full flex flex-col overflow-y-auto\" style=\"height: 50vh;\"> </div> <div class=\"w-full h-20\"> <div class=\"w-full h-full flex justify-between\"> <input type=\"text\" name=\"msg\" id=\"msgg\" placeholder=\"Enter message\" class=\"flex justify-center w-3/4 h-3/4 rounded-3xl\"> <button class=\"bg-orange-300 rounded-2xl w-1/4 h-3/4 ml-3\" data-ccsrf = '{% csrf_token %}' id=\"sendbtn\" onclick=\"sendd()\" >Send</button> </div> </div> </div> </div> </div> </div> </div> AJAX Implementation for Updating Chat Contacts and Sending Message The below code snippet is providing real time user update. The provided JavaScript code uses the setInterval function to periodically send a GET request to the 'refchat' URL in the Django project. This URL is dynamically generated using the user parameter 'enp'. The received HTML response is then used to update the content of the element with the 'chat' ID on the webpage at one-second intervals. Essentially, this code snippet implements a real-time update mechanism for the chat section on the webpage, refreshing the content every second. setInterval(function() { $.ajax({ type: \"GET\", url: \"{% url 'refchat' user=enp %}\", dataType:'html', success: function(res) { $('#chat').html(res) ; }, }); }, 1000); {% for actib in activ %} {% if actib.stu_id != user.stu_id %} <div class=\"w-full h-14 rounded-2xl mt-4 flex px-8 bg-orange-300 items-center\"> {% if actib.profpic.url != \"\" %} <img src=\"{{actib.profpic.url}}\" alt=\"\" class=\"object-cover rounded-full w-12 h-12\" style=\"margin-right: 1vh;\"> {% else %} <img src=\"\" alt=\"\" class=\"object-cover rounded-full w-12 h-12 bg-black\" style=\"margin-right: 1vh;\"> {% endif %} <h3 class=\"text-md font-md ml-3\">{{actib.firstName}}</h3> </div> {% endif %} {% endfor %} Sending Message Function Using AJAX This code snippet provides real time message sending to another user. The provided JavaScript function 'sendd' is triggered when a user sends a message. It retrieves the message content from the 'msgbox' element, which represents a message input box on the webpage. The CSRF token is also obtained to ensure secure communication. The obtained message content and CSRF token are then sent as POST data to the 'sendmsg' URL in the Django project, which is dynamically generated using the 'enp' user parameter. Upon successful completion, a log message is printed to the console, indicating that the message has been sent successfully. Essentially, this code handles the client-side functionality for sending messages in a real-time chat system. let msgbox = document.getElementById('msgg') ; function sendd() { let ccs = $('[name=csrfmiddlewaretoken]').val(); let __msg = msgbox.value ; msgbox.value = \"\" ; console.log(ccs) ; $.ajax({ type: \"POST\", url: \"{% url 'sendmsg' user=enp %}\", data: { csrfmiddlewaretoken: ccs, tousr : __idd, msg: __msg }, success: function() { console.log(\"Sned successfully\") ; } }); } Backend of Chat System This code snippet provides chat contacts updation. The 'refreshchat' view in the Django project retrieves a user's information using the 'user' parameter, which is dynamically generated. It checks if the user is validated by checking the presence of the 'validate' key in the session. If validated, it obtains the student object associated with the user and filters active students. The gathered data, including the active students and the user's information, is then passed to the 'refreshchat.html' template for rendering. In essence, this view facilitates the refreshing of the chat interface by providing information about active users for chat interactions. def refreshchat(req, user): if 'validate' in req.session: stuobj = students.objects.get(stu_id = signing.loads(user, key=key)) filtee = students.objects.filter(active = \"true\") print(stuobj) data = { 'activ': filtee, 'user':stuobj, } return render(req, \"refreshchat.html\", data) The 'sendmsg' view in the Django project handles the process of sending messages between users. It extracts information from the request, such as the sender, receiver, and message content. The view checks if a conversation between the sender and receiver already exists. If it does, a new message is added to the existing conversation; otherwise, a new conversation is created, including the participants, and the message is added to this new conversation. The view returns a status code 204, indicating a successful operation without any content in the HTTP response. In summary, this view facilitates the sending of messages and manages the conversation structure between users. def sendmsg (req, user) : decrp = signing.loads(user, key=key) obj = students.objects.get(stu_id = decrp) toObj = students.objects.get(stu_id = req.POST.get('tousr')) _pk = toObj.stu_id+\"_\"+obj.stu_id _orpk = obj.stu_id+\"_\"+toObj.stu_id print(_pk, _orpk) if conversations.objects.filter(pkk = _pk).exists(): mesg = messages.objects.create(convs=conversations.objects.get(pkk = _pk), sender = obj, msg = req.POST.get('msg')) elif conversations.objects.filter(pkk = _orpk).exists(): mesg = messages.objects.create(convs=conversations.objects.get(pkk = _orpk), sender = obj, msg = req.POST.get('msg')) else: convo = conversations.objects.create(pkk = _pk) convo.userss.add(obj, toObj) mesg = messages.objects.create(convs=convo, sender = obj, msg = req.POST.get('msg')) return HttpResponse(status=204) The 'getmsg' view in the Django project is responsible for retrieving and displaying messages exchanged between two users. It extracts information from the request, such as the sender and receiver, and uses this information to determine the conversation ID (pk1 and pk2). The view checks if a conversation with the given ID exists. If it does, it retrieves all the messages associated with that conversation; otherwise, it sets the 'msgs' variable to an empty string. The retrieved messages, along with other relevant data, are then passed to the 'getmsg.html' template for rendering. In summary, this view handles the retrieval and display of messages in a conversation between two users. def getmsg(req, user): derc= signing.loads(user, key=key) objj = students.objects.get(stu_id = derc) toobj = students.objects.get(stu_id = req.GET.get('to_id')) pk1 = objj.stu_id + \"_\" + toobj.stu_id pk2 = toobj.stu_id+ \"_\"+ objj.stu_id if conversations.objects.filter(pkk = pk1).exists(): msgs = messages.objects.filter(convs = conversations.objects.get(pkk = pk1)) elif conversations.objects.filter(pkk = pk2).exists(): msgs = messages.objects.filter(convs = conversations.objects.get(pkk = pk2)) else: msgs = \"\" data = { \"enp\": user, \"user\": objj, \"msgs\":msgs, } return render(req, 'getmsg.html', data) Thats the overall chatting system mechanism. University Notice Panel by 011203010 Notification Panel is one of the key features in our system. We have implemented the feature by using Web Scrapping . Here Python beautifulSoup module was implemented. The provided HTML code represents a dynamic list of hyperlinks ('a' elements) displayed within a container. It utilizes the Django template language with a for loop to iterate through pairs of links and corresponding headings provided by the 'zip' variable. For each iteration, it generates a div element with a specific style, containing a hyperlink with the associated URL and text. <div class=\"w-full h-full flex flex-col overflow-y-auto bg-gray-100 mt-3 rounded-2xl ml-3 px-10\"> {% for link, head in zip %} <div class=\"mt-4 rounded-xl h-20 w-full bg-orange-100 text-2xl flex items-center px-20\" style=\"height: 10vh;\"> <a href=\"{{link}}\" target=\"_blank\" class=\"h-full\">{{head}}</a> </div> {% endfor %} </div> Backend The provided Django view function, named 'notice', fetches the latest notices from the UIU website. It uses the requests library to retrieve content from multiple pages on the UIU notices section. The BeautifulSoup library is then employed to parse the HTML content and extract relevant information such as notice headlines and corresponding links. The extracted data is zipped together into a 'zipit' variable, which is then passed to the 'notice.html' template along with user and additional data. In the template, this information is used to dynamically generate a list of clickable notice headlines, each linked to its respective notice page on the UIU website. The 'alls' variable appears to retrieve all student objects from the database, but its usage is not clear in this context. def notice(req, user): dumm = signing.loads(user, key=key) obj = students.objects.get(stu_id = dumm) noticee = [] linkss = [] for i in range(0, 3): reqs = requests.get(\"https://www.uiu.ac.bd/notices/page/\"+str(i)) soup = BeautifulSoup(reqs.content, \"html.parser\") for links in soup.find_all(\"article\"): headrs = links.find('header') h2 = headrs.find(\"h2\") a = h2.find(\"a\") # print(a.get(\"href\")) linkss.append(a.get(\"href\")) noticee.append(h2.text) zipit = zip(linkss, noticee) print(zipit) alls = students.objects.all() data = { 'user':obj, 'enp':user, 'zip':zipit, 'all': alls, } return render(req, \"notice.html\", data) Club Management by 011201195 Club management feature is the unique feature of our project. Here a user can create and manage clubs. For implementing the feature we have create a window where all clubs will be displayed and users can access them through the window. <div class=\"w-full h-full bg-gray-100 flex flex-col px-20\"> <div class=\"w-full h-20 flex justify-end items-center\"> <button onclick=\"ppup()\" class=\" mt-5 w-1/5 h-3/4 bg-orange-300 flex justify-center items-center rounded-2xl text-md font-bold\"> <svg class=\"w-6 h-6 text-gray-800 dark:text-white\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 20 20\"> <path d=\"M9.546.5a9.5 9.5 0 1 0 9.5 9.5 9.51 9.51 0 0 0-9.5-9.5ZM13.788 11h-3.242v3.242a1 1 0 1 1-2 0V11H5.304a1 1 0 0 1 0-2h3.242V5.758a1 1 0 0 1 2 0V9h3.242a1 1 0 1 1 0 2Z\"/> </svg> <h3 class=\"ml-5\">Create Club</h3> </button> </div> <div class=\"w-full h-full flex flex-col overflow-y-auto mt-3\"> <div class=\"w-3/4 h-fit flex flex-col mb-5\"> <h3 class=\"text-3xl font-bold\">Clubs</h3> <h3 class=\"text-md \">Manage and access all of your clubs from here.</h3> </div> {% for c in club %} <div class=\"w-3/4 mt-6 flex items-center px-20 rounded-2xl h-1/5 bg-gray-300\"> <img src=\"\" alt=\"\" class=\"rounded-full bg-orange-300\" style=\"width: 150px ; height: 150px;\"> <div class=\"w-2/3 h-full flex justify-center flex-col ml-8\"> <h3 class=\"text-4xl font-bold\">{{c.clubname}}</h3> <h3>{{c.purpose}}</h3> </div> {% if c.adminid == obj %} <a id=\"{{c.clubname}}\" href=\"{% url 'cdash' user=enp club=c.clubname %}\" class=\"w-1/6 h-1/3 ml-8 flex justify-center items-center text-2xl text-white rounded-2xl\" style=\"background-color: blue;\">Enter</a> {% else %} <a id=\"{{c.clubname}}\" href=\"{% url 'approval' user=enp club=c.clubname %}\" class=\"w-1/6 h-1/3 bg-green-500 ml-8 flex justify-center items-center text-2xl text-white rounded-2xl\">Join</a> {% endif %} </div> {% endfor %} </div> </div> Moreover, a user can create a club. The form is designed to provide essential details for creating a club, and it includes client-side interactivity, such as enabling/disabling certain fields based on the user's selection of admin type. <div id=\"club\" class=\"absolute w-full h-full flex flex-col items-center\" style=\"display: none;\"> <div class=\"bg-white rounded-xl mt-10 px-20 flex flex-col items-center\" style=\"width: 50%; height: 80%; margin-left: 25%;\"> <h3 class=\"text-3xl font-bold mt-5 mb-1\">Create Your Club</h3> <h3>Give information of the club below</h3> <div class=\"w-full h-full mt-20\"> <form class=\"w-full h-full flex\" method=\"POST\" action=\"{% url 'addclub' user=enp %}\"> {% csrf_token %} <div class=\"w-1/2 h-full flex flex-col\" > <label for=\"cname\">Club name</label> <input type=\"text\" class=\"rounded-xl\" name=\"cname\" id=\"cname\" placeholder=\"Enter Club Name\"> <label class=\"mt-4\" for=\"ctype\"> Choose type</label> <select name=\"ctype\" class=\"rounded-xl\" id=\"ctype\"> <option value=\"sports\">Sports</option> <option value=\"cultural\">Cultural</option> <option value=\"education\">Education</option> <option value=\"robotics\">Robotics</option> <option value=\"contest\">Contest</option> </select> <label class=\"mt-4\" for=\"purpose\">Club purpose</label> <textarea class=\"text-md rounded-xl\" name=\"purpose\" id=\"purpose\" cols=\"10\" rows=\"6\" style=\"resize: none;\"></textarea> <label class=\"mt-4\" for=\"rules\">Rules and Regulations</label> <textarea class=\"text-md rounded-xl\" name=\"rules\" id=\"rules\" cols=\"10\" rows=\"6\" style=\"resize: none;\"></textarea> </div> <div class=\"w-1/2 h-full flex flex-col\" style=\"margin-left: 4%;\"> <div class=\"w-full flex flex-col h-fit text-xl \"> <label for=\"\" >Who are you?</label> <div class=\"flex w-full items-center\"> <input type=\"radio\" onclick=\"ad()\" name=\"admin\" id=\"admin\" value=\"Admin\" checked> <label for=\"admin\" class=\"ml-1\">Admin</label> <input type=\"radio\" onclick=\"notad()\" class=\"ml-5\" name=\"admin\" id=\"nadmin\" value=\"Not Admin\"> <label for=\"admin\" class=\"ml-1\">Not admin</label> </div> </div> <label for=\"name\" class=\"mt-4\">Admin name</label> <input class=\"rounded-xl\" type=\"text\" name=\"adminname\" id=\"name\" placeholder=\"Admin Name\" disabled> <label for=\"id\" class=\"mt-4\">Admin email/Student ID</label> <input class=\"rounded-xl\" type=\"text\" name=\"adminmail\" id=\"id\" placeholder=\"Admin email or Student ID\" disabled> <label for=\"accep\" class=\"font-bold mt-4\">Are you agree with us?</label> <div class=\"w-fit h-fit flex mt-2\"> <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"> <path d=\"M11,16.4l-4.7-4.7l1.4-1.4l3.3,3.3l8.4-8.4C17.5,3.3,14.9,2,12,2C6.5,2,2,6.5,2,12s4.5,10,10,10s10-4.5,10-10 c0-1.9-0.5-3.6-1.4-5.1L11,16.4z\"></path> </svg> <h3 class=\"ml-2\">The club is not for commercial purposes.</h3> </div> <div class=\"w-fit h-fit flex mt-2\"> <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"> <path d=\"M11,16.4l-4.7-4.7l1.4-1.4l3.3,3.3l8.4-8.4C17.5,3.3,14.9,2,12,2C6.5,2,2,6.5,2,12s4.5,10,10,10s10-4.5,10-10 c0-1.9-0.5-3.6-1.4-5.1L11,16.4z\"></path> </svg> <h3 class=\"ml-2\">Try to keep maintain a good bonding among members</h3> </div> <div class=\"w-fit h-fit flex mt-2\"> <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"> <path d=\"M11,16.4l-4.7-4.7l1.4-1.4l3.3,3.3l8.4-8.4C17.5,3.3,14.9,2,12,2C6.5,2,2,6.5,2,12s4.5,10,10,10s10-4.5,10-10 c0-1.9-0.5-3.6-1.4-5.1L11,16.4z\"></path> </svg> <h3 class=\"ml-2\">Any kind of vulgar content should not be allowed.</h3> </div> <div class=\"w-fit h-fit flex mt-2\"> <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"> <path d=\"M11,16.4l-4.7-4.7l1.4-1.4l3.3,3.3l8.4-8.4C17.5,3.3,14.9,2,12,2C6.5,2,2,6.5,2,12s4.5,10,10,10s10-4.5,10-10 c0-1.9-0.5-3.6-1.4-5.1L11,16.4z\"></path> </svg> <h3 class=\"ml-2\">Check the members identity before approval.</h3> </div> <div class=\"w-fit h-fit flex mt-2 items-center\"> <input type=\"checkbox\" name=\"agree\" id=\"\"> <h3 class=\"ml-2\">I am agree with the conditions.</h3> </div> <div class=\"w-full h-fit flex justify-end px-1 mt-8\"> <input class=\"w-full h-14 bg-green-500 flex justify-center items-center\" type=\"submit\" name=\"sub\" id=\"\" value=\"Create Group\"> </div> </div> </form> </div> </div> </div> Backend The createClub view function is an integral part of a Django web application, responsible for managing the creation of clubs within the system. It first checks whether the user is authenticated by verifying the presence of the 'validate' key in the session. Upon receiving a POST request, indicating the submission of a form, the function extracts essential details such as the club name, type, purpose, rules, and the type of administrator (admin or non-admin). Depending on the admin type, it determines the admin's name and object. Subsequently, a new club object is created with the provided information and stored in the database. The function then redirects the user to the 'club' page, ensuring a seamless user experience in club creation within the web application. def createClub(req, user): if 'validate' in req.session: derc = signing.loads(user, key=key) obj = students.objects.get(stu_id = derc) if req.method == \"POST\": cname = req.POST['cname'] ctype = req.POST['ctype'] purpose = req.POST['purpose'] rules = req.POST['rules'] admin = req.POST['admin'] print(admin) if admin == 'Admin': a_name = obj.firstName + \" \" + obj.lastName a_obj = obj else: a_name = req.POST['adminname'] a_obj = students.objects.get(stu_id = req.POST['adminmail']) clu = clubs(clubname = cname, clubtype = ctype, purpose = purpose, rules = rules, adminname = a_name, adminid = a_obj) clu.save() return redirect('club', user) else: return redirect('login') A user can access to particular group if he/she is approved by club admin. For that a user must have to send a request to the club. The club admin review it and approve/decline it. The clubApprove view function plays a crucial role in handling club approval within a Django web application. It first checks the user's authentication status by verifying the presence of the 'validate' key in the session. Upon validation, the function retrieves essential information, including the targeted club and the current user. It then checks whether the user is the administrator of the club. If so, the approval status is set to \"Enter\". Otherwise, it is marked as \"Pending\". A new club approval entry is created with the club, student, status, and admin information, and it is saved in the database. Finally, the user is redirected to the 'club' page, ensuring a smooth flow in managing club approvals within the web application. def clubApprove(req, user, club): if 'validate' in req.session: clubd = clubs.objects.get(clubname = club) student = students.objects.get(stu_id = signing.loads(user, key=key)) admin = clubd.adminid if admin == student: status = \"Enter\" else: status = \"Pending\" clubapprv = clubApproval(clubid = clubd, studentss = student, status = status, admin = admin) clubapprv.save() return redirect('club', user=user) else: return redirect('login') Club Dashboard by 011201195 and 011201148 When a user enters into a club he/she can see the posts regarding a club. Moreover, the upcoming events are also displayed there. So a user can easily interact with the events. For club admin there will be a scetion from where he/she can manage the approval requests. Club Posts <div class=\"w-full h-full flex \"> <div class=\"w-2/3 h-full flex flex-col\"> <img src=\"{% static 'img/uiu.jpg' %}\" alt=\"\" class=\"mt-5 object-cover bg-center w-full h-1/4 rounded-2xl\"> <h3 class=\"w-full text-3xl font-bold mt-8 ml-8 bg-orange-100\">All Posts</h3> <div class=\"w-full h-3/4 mt-5 flex flex-col items-center\" style=\"padding: 0 20vh 0 20vh\"> <div class=\"flex w-full justify-center items-center rounded-xl bg-gray-100\" style=\"height: 8vh;\"> {% if obj.profpic.url != \"\" %} <img src=\"{{obj.profpic.url}}\" alt=\"\" class=\"object-cover rounded-full w-12 h-12\" style=\"margin-right: 1vh;\"> {% else %} <img src=\"\" alt=\"\" class=\"object-cover rounded-full w-12 h-12 bg-black\" style=\"margin-right: 1vh;\"> {% endif %} <button class=\"w-2/3 ml-3 pl-8 text-gray-300 bg-transparent flex items-center rounded-2xl\" style=\"height: 5vh; border: 1px solid #0c0c0ccc\" onclick=\"popup()\">Share your thoughts</button> </div> {% for posts in cpost %} <div class=\"w-full h-fit flex flex-col rounded-2xl bg-orange-100 px-8 mt-6 mb-2\"> <div class=\"w-full h-20 flex items-center\"> {% if posts.student.profpic.url != \"\" %} <img src=\"{{posts.student.profpic.url}}\" alt=\"\" class=\"object-cover rounded-full w-12 h-12\" style=\"margin-right: 1vh;\"> {% else %} <img src=\"\" alt=\"\" class=\"object-cover rounded-full w-12 h-12 bg-black\" style=\"margin-right: 1vh;\"> {% endif %} <div class=\"w-2/3 h-fit flex flex-col\"> <h3 class=\"ml-2 text-md font-bold\">{{posts.student.firstName|add:\" \"|add:posts.student.lastName}}</h3> <h3 class=\"ml-2\">{{posts.student.batch}}</h3> </div> </div> <div class=\"w-full h-fit mt-2 mb-6\"> <p>{{posts.texts}}</p> </div> <div class=\"w-full h-10 flex mb-5 justify-center items-center\"> <div class=\"w-1/2 h-full flex\"> <button id=\"{{posts.iid}}\" data-clubid = \"{{clbname}}\" data-csrf='{% csrf_token %}' data-student=\"{{enp}}\" data-post=\"{{posts.iid}}\" class=\"vote w-full h-full flex items-center justify-center rounded-2xl hover:text-orange-500 hover:font-bold focus:bg-orange-300\"> <svg class=\"w-6 h-6 text-gray-800 dark:text-white\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 20\"> <path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"0.9\" d=\"M4.008 8.714c1-.097 1.96-.45 2.792-1.028a25.112 25.112 0 0 0 4.454-5.72 1.8 1.8 0 0 1 .654-.706 1.742 1.742 0 0 1 1.65-.098 1.82 1.82 0 0 1 .97 1.128c.075.248.097.51.065.767l-1.562 4.629M4.008 8.714H1v9.257c0 .273.106.535.294.728a.99.99 0 0 0 .709.301h1.002a.99.99 0 0 0 .71-.301c.187-.193.293-.455.293-.728V8.714Zm8.02-1.028h4.968c.322 0 .64.08.925.232.286.153.531.374.716.645a2.108 2.108 0 0 1 .242 1.883l-2.36 7.2c-.288.813-.48 1.354-1.884 1.354-2.59 0-5.39-1.06-7.504-1.66\"/> </svg> <h3 class=\"ml-2\">Upvote</h3> </button> </div> <div class=\"w-1/2 h-full\"> <button class=\"w-full h-full flex justify-center items-center hover:text-orange-500\"> <svg class=\"w-6 h-6 text-gray-800 dark:text-white\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 18\"> <path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"0.9\" d=\"M5 5h5M5 8h2m6-3h2m-5 3h6m2-7H2a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h3v5l5-5h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1Z\"/> </svg> <h3 class=\"ml-2\">Comment</h3> </button> </div> </div> </div> {% endfor %} </div> </div> Approval Management Section <div class=\"w-1/3 h-full flex flex-col\"> <div class=\"h-1/2 w-full flex\"> <div class=\"flex flex-col w-1/2 h-full overflow-y-auto\"> <h3 class=\"text-xl font-bold mt-8 ml-8\">All members</h3> {% for join in joined%} <div class=\"mt-1 w-full h-fit flex flex-col px-8\"> <div class=\"mt-3 w-full flex items-center\" style=\"height: 7vh;\"> {% if join.studentss.profpic.url != \"\" %} <img src=\"{{join.studentss.profpic.url}}\" alt=\"\" class=\"object-cover rounded-full w-12 h-12\" style=\"margin-right: 1vh;\"> {% else %} <img src=\"\" alt=\"\" class=\"object-cover rounded-full w-12 h-12 bg-black\" style=\"margin-right: 1vh;\"> {% endif %} <h3 class=\"ml-5\">{{join.studentss.firstName|add:\" \"|add:join.studentss.lastName}}</h3> </div> </div> {% endfor %} </div> <div class=\"flex flex-col w-1/2 h-full overview-y-auto\"> <h3 class=\"text-xl font-bold mt-8 ml-8\">Pending Requests</h3> {% for pend in pendings %} <div class=\"mt-3 w-full h-fit flex justify-center items-center px-8\"> <div class=\" w-full flex items-center\" style=\"height: 7vh;\"> {% if pend.studentss.profpic.url != \"\" %} <img src=\"{{pend.studentss.profpic.url}}\" alt=\"\" class=\"object-cover rounded-full w-12 h-12\" style=\"margin-right: 1vh;\"> {% else %} <img src=\"\" alt=\"\" class=\"object-cover rounded-full w-12 h-12 bg-black\" style=\"margin-right: 1vh;\"> {% endif %} <h3 class=\"ml-3\">{{pend.studentss.firstName}}</h3> </div> <a class=\"px-2 bg-orange-100\" href=\"{% url 'doapprove' club=pend.clubid.clubname student=pend.studentss.stu_id %}\">Approve</a> </div> {% endfor %} </div> </div> Events Section <div class=\"h-1/2 w-full flex flex-col\"> <div class=\"w-full px-8 flex items-center justify-between\" style=\"height: 7vh;\"> <h3 class=\"h-fit text-xl font-bold\">Upcoming Events</h3> <button onclick=\"popevent()\" id=\"hover\" class=\"flex w-1/3 h-1/2 justify-center items-center\" style=\"margin-left: 13vh; color: rgb(19, 22, 199);\"> Create new event </button> </div> <div class=\"w-full h-full flex flex-col px-8 mt-3 overflow-y-auto\"> {% for eve in events %} <div class=\"w-full h-1/2 flex flex-col px-6 shadow-2xl rounded-xl\"> <img src=\"{{ eve.bannerImg.url }}\" alt=\"\" class=\"object-cover w-full bg-white mt-2 rounded-2xl\" style=\"height:5vh;\"> <h3 class=\"font-bold text-3xl mt-2\" style=\"color: gray;\">{{eve.name}}</h3> <div class=\"w-full h-1/3 flex justify-between mt-1\" style=\"color: rgb(109, 109, 109);\"> <div class=\"flex w-fit h-fit items-center\"> <label for=\"sd\" class=\"font-bold text-xl\">Start:</label> <h3 class=\"ml-2\">{{eve.stime}}</h3> </div> <div class=\"flex items-center w-fit h-fit\"> <label for=\"ed\" class=\"font-bold text-xl\">End:</label> <h3 class=\"ml-2\">{{eve.etime}}</h3> </div> </div> <div class=\"flex w-full h-1/2 justify-end\" style=\"margin-bottom: 2vh;\"> <button onclick=\"viewdetails('{{eve.name}}')\" class=\"w-1/2 h-full rounded-xl justify-center items-center text-white text-xl\" style=\"background-color: rgb(40, 77, 110);\">View Details</button> </div> </div> Event Creation Backend def event(req, user, club): print(club) if 'validate' in req.session and req.method == \"POST\": if 'img' in req.FILES: bannerr = req.FILES['img'] else: bannerr = \"\" print(bannerr) name = req.POST['ename'] cat = req.POST['cate'] clubss = clubs.objects.get(clubname = club) studentss = students.objects.get(stu_id = signing.loads(user, key=key)) stime = req.POST['sdate'] etime = req.POST['edate'] details = req.POST['details'] _vent = eevent(bannerImg = bannerr, name=name, cat=cat, club=clubss, admin = studentss, stime = stime, etime = etime, details = details) _vent.save() members = clubApproval.objects.filter(clubid = clubss).filter(status = \"Joined\") messg = studentss.firstName + \" \" + studentss.lastName+ \" have announced an event you may interested in.\" for mems in members: noti = notification(message = messg, to = mems.studentss) noti.save() return redirect('cdash', user=user, club=club) else: return redirect('login') Here the posts management, upvoting and commenting were done by id 011201148 . def clubposthandling(req, user, club): if 'validate' in req.session: if req.method == \"POST\": texts = req.POST['texts'] studnt = students.objects.get(stu_id = signing.loads(user, key=key)) clubb = clubs.objects.get(clubname = club) iid = clubb.clubname + \" \" + datetime.now().strftime(\"%d-%m-%Y-%H-%S\") clubposts = clubpost(texts = texts, clubidd = clubb, student = studnt, iid = iid) clubposts.save() return redirect('cdash', user=user, club=club) return HttpResponse(\"Hello\") else: return redirect('login') AJAX implementation in Showing Events details by 011201195 The JavaScript function viewdetails is designed to display event details on a web page. When invoked with a specific event identifier ( str ), it first retrieves the HTML container element with the ID 'details' and sets its display style to \"flex,\" making it visible. Subsequently, an AJAX request is made to the server using the URL associated with the 'vdetails' view in the Django application. The event identifier is included as a parameter in the request. Upon successful execution, the response received from the server, containing the details of the specified event, is injected into the HTML container with the ID 'container'. This dynamic loading of event details enables a seamless user experience without requiring a full page reload. function viewdetails(str) { let eventt = document.getElementById('details') ; eventt.style.display = \"flex\" ; $.ajax({ type: \"GET\", url: \"{% url 'vdetails' user=enp %}\", data: { event: str, }, success: function(res) { $('#container').html(res) ; } }); } Job Searching by 011201145 In our system Job searching is also another unique features. Here a user can search jobs and apply for it. Here we have used Web scrapping to fetch the jobs from BDJobs . Using the requests library to fetch the HTML content and BeautifulSoup to parse it. Extracting relevant information (title, company, location, description, apply link) from the HTML. def scrape_bdjobs(): url = \"https://www.bdjobs.com/\" response = requests.get(url) soup = BeautifulSoup(response.content, \"html.parser\") jobs = [] for job_elem in soup.find_all(\"div\", class_=\"job-title\"): title_elem = job_elem.find(\"a\") company_elem = job_elem.find_next(\"div\", class_=\"comp-name-text\") location_elem = job_elem.find_next(\"div\", class_=\"locon\") apply_link = title_elem.get(\"href\") job = Job( title=title_elem.text.strip(), company=company_elem.text.strip(), location=location_elem.text.strip(), apply_link=apply_link, ) jobs.append(job) return jobs The provided HTML template is designed for rendering job listings on a webpage. It utilizes a loop to iterate through a list of job objects and dynamically generates HTML content for each job, including details such as job title, company, location, and a link to apply. The template allows for a clean and organized display of job information on the frontend. <h1>Job Listings</h1> {% for job in job_listings %} <div> <h2>{{ job.title }}</h2> <p>{{ job.company }} - {{ job.location }}</p> <p>{{ job.description }}</p> <a href=\"{{ job.apply_link }}\" target=\"_blank\">Apply Now</a> </div> {% endfor %} User Profile by 011203010 Users can see their profile to check his/her previous posts and informations. The provided Django view function is for rendering a user profile page. It retrieves the user object based on the provided user ID, loads associated posts and likes data, and then passes this information to the corresponding HTML template profile.html . The template is responsible for displaying the user's profile information, including posts and associated likes, providing a comprehensive view of the user's activity on the platform. Fetching Information def profile(req, user): obj = students.objects.get(stu_id = signing.loads(user, key=key)) pObj = posts.objects.filter(student = obj) like = likes.objects.all() data = { \"user\":obj, 'enp':user, 'post':pObj, 'likes':like, } return render(req, \"profile.html\", data) Frontend functions <div class=\"w-full h-full flex\"> <div class=\"w-1/5 bg-orange-300 flex-col rounded-2xl\" style=\"height: 50vh;\"> <div class=\" mt-10 ml-5 flex justify-center items-center px-20 rounded-full bg-black\" style=\"height: 15vh; width: 15vh; background-image: url(''); background-size: cover; background-position: center; background-repeat: no-repeat;\"> <label for=\"image\" class=\"img mt-10 font-bold mb-2 w-full\"> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-camera-fill\" style=\"margin-right: 9px;\" viewBox=\"0 0 16 16\"> <path d=\"M10.5 8.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z\"/> <path d=\"M2 4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.172a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 9.172 2H6.828a2 2 0 0 0-1.414.586l-.828.828A2 2 0 0 1 3.172 4H2zm.5 2a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm9 2.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0z\"/> </svg> </label> <input type=\"file\" name=\"img\" id=\"image\" style=\"display: none;\"> </div> <div class=\"mt-4 ml-5 w-full h-fit flex flex-col font-bold\"> <p class=\"text-2xl\">{{user.firstName|add:\" \"|add:user.lastName}}</p> <p class=\"text-md\">{{user.stu_id}}</p> </div> <div class=\"mt-10 ml-5 w-full h-fit flex flex-col \"> <p>ID: {{user.batch}}</p> <p>Department: {{user.dept}}</p> <p>Phone number: {{user.phone_number}}</p> </div> </div> <div class=\"w-4/5 h-full px-20 flex flex-col\"> <p class=\"text-2xl font-bold bg-gray-100 flex items-center\" style=\"height: 4vh;\">Your Posts</p> <div class=\"overflow-y-auto w-full pr-10\" style=\"height: 82vh;\"> {% for posts in post %} <div class=\"w-full h-fit flex flex-col rounded-2xl bg-orange-100 px-8 mt-6 mb-5\"> <div class=\"w-full h-20 flex items-center\"> <img src=\"\" alt=\"\" class=\"w-12 h-12 rounded-full object-cover\"> <div class=\"w-2/3 h-fit flex flex-col\"> <h3 class=\"ml-2 text-md font-bold\">{{posts.student.firstName|add:\" \"|add:posts.student.lastName}}</h3> <div class=\"ml-2 w-full h-fit flex items-center\"> <h3 class=\"\">{{posts.student.stu_id}}</h3> <div class=\"ml-2 w-20 h-fit bg-orange-400 rounded-2xl flex justify-center text-white\"> <p class=\"font-bold\">{{posts.category}}</p> </div> </div> </div> </div> <div class=\"w-full h-fit mt-2 mb-6\"> <p>{{posts.text}}</p> </div> <div class=\"w-full flex flex-col\" style=\"height: 15vh; margin: 0 0 2vh 0;\"> {% for like in likes %} {% if like.post == posts %} <div class=\"w-1/2 flex mt-2 bg-orange-300 rounded-2xl\"> {% if like.user.profpic.url != \"\" %} <img src=\"{{like.user.profpic.url}}\" alt=\"\" class=\"rounded-xl\" style=\"width: 5vh; height: 5vh;\"> {% else %} <img src=\"\" alt=\"\" class=\"bg-black rounded-xl\" style=\"width: 5vh; height: 5vh;\"> {% endif %} <div class=\"ml-2 w-fit flex flex-col\"> <p class=\"font-bold\">{{like.user.firstName|add:\" \"|add:like.user.lastName}}</p> <p>{{like.comment}}</p> </div> </div> {% endif %} {% endfor %} </div> </div> {% endfor %} </div> </div> </div> This is all about the coding part of our system.","title":"Coding Document"},{"location":"coding_document/#about-the-part","text":"It is a document of how we develop the system's core functionality. Here we will try to describe each implementation with proper codebase.","title":"About the part"},{"location":"coding_document/#authenticated-system-by-011201145","text":"When a user enters our system then he/she must be a valid user. For validating, a user have to register our system. Our register system has ID Verification system to authenticate the right user. After authenticating, the user must have to login to our system by his/her user id and password. Backend of Validation and Session The Django view functions \"post_sign\", \"validate_user\" and \"logout,\" handle user registration, user authentication and logout functionality, respectively. In \"post_sign\", using POST method all necessary data are being gethered and pass to database for completing registration. def post_sign(req): if req.method == \"POST\": s_id = req.POST['mail'] fname = req.POST['fname'] lname = req.POST['lname'] password = req.POST['pass'] dept = req.POST['dept'] batch = req.POST['batch'] phn = req.POST['phn'] student = students(stu_id = s_id, firstName = fname, lastName = lname, password = password, batch = batch, dept = dept, phone_number = phn) student.save() return redirect('login') return render(\"signup\") In \"validate_user\" upon receiving a POST request with user credentials, the function retrieves the corresponding student object from the database. If the object exists and the entered password matches, it sets the user's status to active, saves the changes, and creates a session to validate the user. It then redirects the user to the dashboard page. def validate_user (req) : if req.method == \"POST\": __id = req.POST['email'] __pass = req.POST['pass'] objj = students.objects.get(stu_id = __id) print(objj) if (objj and objj.password == __pass): objj.active = \"true\" objj.save() req.session['validate'] = objj.stu_id encrp = signing.dumps(objj.stu_id, key=key) return redirect('dashb', user=encrp) return render(req, \"index.html\") On the other hand, \"logout\" checks if a user is currently validated in the session. If so, it deactivates the user, saves the changes, and flushes the session, effectively logging the user out. The function then redirects the user to the login page. def logout(req, user): if 'validate' in req.session: obj = students.objects.get(stu_id = user) obj.active = 'false' obj.save() req.session.flush() return redirect('login') AJAX Implementation for validating Email and Auto-fill If the email is validate correctly then from the email student ID, Batch and Department are being fetched and auto fill the necessary fields during registration. <script> function __validity() { let text__ = document.getElementById('email').value; let batch = document.getElementById('batch'); let dpet = document.getElementById('dept'); let btn = document.getElementById('sub'); let loading = document.getElementById('loading'); dpet.value = \"\"; batch.value = \"\"; document.getElementById('email').style.borderColor = \"\"; if (!text__.includes('@bscse.uiu.ac.bd') && !text__.includes('@bseee.uiu.ac.bd')) { document.getElementById('email').style.borderColor = \"red\"; btn.disabled = true; } else { loading.style.display = \"block\"; let xhr = new XMLHttpRequest(); xhr.open('GET', 'validate_email.php?email=' + text__, true); xhr.onreadystatechange = function () { if (xhr.readyState == 4 && xhr.status == 200) { loading.style.display = \"none\"; let response = JSON.parse(xhr.responseText); if (response.valid) { btn.disabled = false; document.getElementById('email').style.borderColor = \"green\"; let val = text__.split(\"@\"); batch.value = \"011\" + val[0].match(/[0-9]/g).join(''); if (text__.includes('@bscse.uiu.ac.bd')) { dpet.value = \"Computer Science and Engineering\"; } else if (text__.includes('@bseee.uiu.ac.bd')) { dpet.value = \"Electrical and Electronics Engineering\"; } } else { document.getElementById('email').style.borderColor = \"red\"; btn.disabled = true; } } }; xhr.send(); } } </script>","title":"Authenticated System by 011201145"},{"location":"coding_document/#creating-and-publishing-posts-by-011201148","text":"Here a user can create and publish a post to the community to get help. Here a user can select a category so that others can easily filter out a particular post. The categories are: Help , Job , Seeking , Urgent , Club . Frontend The provided HTML code represents a form for creating posts on a web page. It is designed as a modal, with a button likely triggering its display. The form includes a textarea for the post content and a dropdown menu for selecting the post category (e.g., Urgent, Help, Club, Job, Seeking Post). There is also a \"Publish\" button to submit the post. The modal has a distinct style, positioned on the right side of the page, initially hidden and revealed when needed. Overall, it provides a user-friendly interface for users to compose and categorize posts. <div class=\"w-1/3 absolute h-2/3 bg-gray-100 mt-28 shadow-2xl rounded-2xl flex flex-col\" id=\"post\" style=\"margin-left:75vh; display:none;\"> <div class=\"w-full h-20 flex justify-center items-center text-xl font-bold\"> <h1>Create Post</h1> </div> <div class=\"w-full flex flex-col items-center mt-1 \"> <form action=\"{% url 'postit' user=enp %}\" method=\"POST\" class=\"flex flex-col\"> {% csrf_token %} <textarea name=\"post\" class=\"rounded-2xl px-10 py-7 text-md\" id=\"\" cols=\"50\" rows=\"15\" style=\"resize:none\"></textarea> <div class=\"w-full flex justify-between mt-3\"> <select name=\"cat\" id=\"\" class=\"w-1/3 flex items-center text-center rounded-2xl\"> <option value=\"urgent\">Urgent</option> <option value=\"help\">Help</option> <option value=\"club\">Club</option> <option value=\"job\">Job</option> <option value=\"seek\">Seeking Post</option> </select> <input type=\"submit\" name=\"sub\" id=\"\" value=\"Publish\" class=\"w-24 rounded-2xl bg-orange-400 h-12 bg-black\"> </div> </form> </div> </div> Backend The postText function handles the posting of text content on a platform, likely a social media or discussion forum. It first checks if the user session has a 'validate' key. If validated, it decrypts the user ID, retrieves the corresponding student object, and processes a POST request. The function extracts the posted text, category, and generates a unique ID based on the student ID and current timestamp. A new post object is then created and saved to the database. Finally, the function redirects the user to a dashboard view if validated; otherwise, it redirects to the login page. def postText(req, user): if 'validate' in req.session: encrp = signing.loads(user, key=key) _obj = students.objects.get(stu_id = encrp) if req.method == \"POST\": text = req.POST['post'] stu = _obj cat = req.POST['cat'] idd = _obj.stu_id + \"-\" + datetime.now().strftime(\"%d-%m-%Y-%H-%M-%S\") object = posts(text = text, student = stu, category = cat, iid = idd) object.save() return redirect('dashb', user=user) else: return redirect('login') Moreover a user can upvote and comment on particular posts. Frontend <div class=\"w-full h-10 flex mb-5 justify-center items-center\"> <div class=\"w-1/2 h-full flex\"> <button id=\"{{posts.iid}}\" data-user=\"{{user.stu_id}}\" data-post=\"{{posts.iid}}\" data-csrf='{% csrf_token %}' class=\"vote w-full h-full flex items-center justify-center rounded-2xl hover:text-orange-500 hover:font-bold\" data-enp=\"{{enp}}\"> <svg class=\"w-6 h-6 text-gray-800 dark:text-white\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 20\"> <path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"0.9\" d=\"M4.008 8.714c1-.097 1.96-.45 2.792-1.028a25.112 25.112 0 0 0 4.454-5.72 1.8 1.8 0 0 1 .654-.706 1.742 1.742 0 0 1 1.65-.098 1.82 1.82 0 0 1 .97 1.128c.075.248.097.51.065.767l-1.562 4.629M4.008 8.714H1v9.257c0 .273.106.535.294.728a.99.99 0 0 0 .709.301h1.002a.99.99 0 0 0 .71-.301c.187-.193.293-.455.293-.728V8.714Zm8.02-1.028h4.968c.322 0 .64.08.925.232.286.153.531.374.716.645a2.108 2.108 0 0 1 .242 1.883l-2.36 7.2c-.288.813-.48 1.354-1.884 1.354-2.59 0-5.39-1.06-7.504-1.66\"/> </svg> <h3 class=\"ml-2\">Upvote</h3> </button> </div> <div class=\"w-1/2 h-full flex items-center justify-center\"> <input type=\"text\" name=\"comnt\" id=\"{{posts.iid}}\" placeholder=\"Enter a comment\" class=\"koment ml-8 rounded-2xl\"> <button class=\"cmnt w-full h-full flex justify-center items-center hover:text-orange-500\" data-csrrf='{% csrf_token %}' data-postid=\"{{posts.iid}}\" data-enp=\"{{enp}}\" data-user=\"{{user.stu_id}}\" > Comment </button> </div> </div> Backend for Upvoting The provided Django view function, \"likeit\" handles the upvoting mechanism for posts on a web platform. Upon receiving a POST request, the function extracts the relevant information, including the user and post IDs. It increments the upvote count of the corresponding post and saves the updated information. Additionally, it checks whether the user has previously upvoted the post. If yes, it updates the existing like entry; otherwise, it creates a new like entry in the database. Finally, the function generates a notification message indicating the user's upvote action and saves it in the notifications database. The function then redirects the user to the dashboard page. Same goes for Commenting backend. def likeit(req): if 'validate' in req.session: if req.method == 'POST': print(req.POST.get('post_id')) user = students.objects.get(stu_id = req.POST.get('user')) post_obj = posts.objects.get(iid = req.POST.get('post_id')) post_obj.upvote = int(post_obj.upvote) + 1 post_obj.save() if likes.objects.filter(post=post_obj, user=user).exists(): likeobj = likes.objects.get(post=post_obj, user=user) likeobj.counter = post_obj.upvote likeobj.save() else: like = likes(counter = post_obj.upvote, post = post_obj, user = students.objects.get(stu_id = req.POST.get('user'))) like.save() message = user.firstName + \" \" + user.lastName + \" has upvoted your post.\" notificat = notification(message = message, to=post_obj.student) notificat.save() print(\"Hello\" + post_obj) return redirect('dashb', user=req.POST.get('enpp')) else: return redirect('login') Backend for Commenting def comment(req, user): der = signing.loads(user, key=key) obj = students.objects.get(stu_id = der) comnt = req.POST.get('cmnt') postid = req.POST.get('postid') pst = posts.objects.get(iid = postid) if likes.objects.filter(post=pst, user=obj).exists(): print(comnt) likeobj = likes.objects.get(post=pst, user=obj) likeobj.comment = comnt likeobj.save() else: cmntobj = likes(post=pst, user=obj, comment=comnt) cmntobj.save() msg = obj.firstName + \" \" + obj.lastName + \" has commented on your posts.\" notiobj = notification(message=msg, to=pst.student) notiobj.save() return HttpResponse(status=204) AJAX Implementation for real-time Like and Comment //Upvote $(document).ready(function() { $('.cmnt').on('click', function() { let postid = $(this).data('postid') ; let enpp = $(this).data(\"enp\"); let user = $(this).data(\"user\") ; let commentt = $(this).siblings('.koment').val() ; let cssrf = $('[name=csrfmiddlewaretoken]').val(); $(this).siblings('.koment').val(\"\") ; console.log(commentt); $.ajax({ type: \"POST\" , url: \"{% url 'commentit' user=enp %}\", data:{ csrfmiddlewaretoken: cssrf, postid:postid, cmnt: commentt, }, success: function() { console.log(commentt) ; } }); }); }); //Comment $(document).ready(function() { $('.cmnt').on('click', function() { let postid = $(this).data('postid') ; let enpp = $(this).data(\"enp\"); let user = $(this).data(\"user\") ; let commentt = $(this).siblings('.koment').val() ; let cssrf = $('[name=csrfmiddlewaretoken]').val(); $(this).siblings('.koment').val(\"\") ; console.log(commentt); $.ajax({ type: \"POST\" , url: \"{% url 'commentit' user=enp %}\", data:{ csrfmiddlewaretoken: cssrf, postid:postid, cmnt: commentt, }, success: function() { console.log(commentt) ; } }); }); });","title":"Creating and Publishing Posts by 011201148"},{"location":"coding_document/#post-categorization-by-011201171","text":"Here a user can filter out specific categorized posts in thier feed. A user just need to select the category and the feed will than show the result of specific categorized posts with real time manner. AJAX Implementation for Real-time Categorization The provided AJAX snippet listens for changes in the element with the ID \"change.\" When a change occurs, it retrieves the selected value from this element. Subsequently, it initiates an AJAX request to the server using the URL specified in the 'url' attribute. The data parameter includes the selected value ('cat') as part of the request. Upon successful completion of the AJAX request, the function specified in the 'success' attribute is executed. In this case, it takes the received data and updates the HTML content of the element with the ID \"postt\" using the $(\"#postt\").html(data) statement. This code snippet is likely part of a feature that dynamically updates content on a webpage based on user interactions. $(\"#change\").change(function() { var val = $(this).val() ; $.ajax({ url: \"{% url 'categorize' user=enp %}\", data: { 'cat':val, }, success: function(data){ $(\"#postt\").html(data) ; } }); }) ; There is a seperate .html template for categorization. This file will be passed on $(\"#postt\").html(data) as data and show the responeses. {% for posts in post %} <div class=\"w-full h-fit flex flex-col rounded-2xl bg-orange-100 px-8 mt-6 mb-5\" > <div class=\"w-full h-20 flex items-center\"> <img src=\"\" alt=\"\" class=\"w-12 h-12 rounded-full bg-black\" /> <div class=\"w-2/3 h-fit flex flex-col\"> <h3 class=\"ml-2 text-md font-bold\"> {{posts.student.firstName|add:\" \"|add:posts.student.lastName}} </h3> <div class=\"ml-2 w-full h-fit flex items-center\"> <h3 class=\"\">{{posts.student.stu_id}}</h3> <div class=\"ml-2 w-20 h-fit bg-orange-400 rounded-2xl flex justify-center text-white\" > <p class=\"font-bold\">{{posts.category}}</p> </div> </div> </div> </div> <div class=\"w-full h-fit mt-2 mb-6\"> <p>{{posts.text}}</p> </div> <div class=\"w-full h-10 flex mb-5 justify-center items-center\"> <div class=\"w-1/2 h-full flex\"> <button id=\"{{posts.iid}}\" data-user=\"{{user.stu_id}}\" data-post=\"{{posts.iid}}\" data-csrf='{% csrf_token %}' class=\"vote w-full h-full flex items-center justify-center rounded-2xl hover:text-orange-500 hover:font-bold\" data-enp=\"{{enp}}\" > <svg class=\"w-6 h-6 text-gray-800 dark:text-white\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 20\" > <path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"0.9\" d=\"M4.008 8.714c1-.097 1.96-.45 2.792-1.028a25.112 25.112 0 0 0 4.454-5.72 1.8 1.8 0 0 1 .654-.706 1.742 1.742 0 0 1 1.65-.098 1.82 1.82 0 0 1 .97 1.128c.075.248.097.51.065.767l-1.562 4.629M4.008 8.714H1v9.257c0 .273.106.535.294.728a.99.99 0 0 0 .709.301h1.002a.99.99 0 0 0 .71-.301c.187-.193.293-.455.293-.728V8.714Zm8.02-1.028h4.968c.322 0 .64.08.925.232.286.153.531.374.716.645a2.108 2.108 0 0 1 .242 1.883l-2.36 7.2c-.288.813-.48 1.354-1.884 1.354-2.59 0-5.39-1.06-7.504-1.66\" /> </svg> <h3 class=\"ml-2\">Upvote</h3> </button> </div> <div class=\"w-1/2 h-full flex\"> <form class=\"w-full h-full flex items-center justify-center\" method=\"post\" action=\"\" > {% csrf_token %} <input type=\"text\" name=\"comnt\" id=\"\" data-csrrf='{% csrf_token %}' data-postid=\"{{posts.iid}}\" data-enp=\"{{enp}}\" data-user=\"{{user.stu_id}}\" placeholder=\"Enter a comment\" class=\"comnt ml-8 rounded-2xl\" /> <button class=\"w-full h-full flex justify-center items-center hover:text-orange-500\" > Comment </button> </form> </div> </div> </div> {% endfor %} In Backend , the provided Django view function, \"categorize\" handles a request by extracting the user information from the session, retrieving the corresponding student object from the database, and filtering posts based on a specified category received through the request's GET parameters. The filtered posts are then passed to the 'categorize.html' template along with user and student information. This view is likely part of a system that dynamically categorizes and displays posts based on user interactions. def categorize(req, user): userr = signing.loads(user, key=key) obj = students.objects.get(stu_id = userr) filtr = posts.objects.filter(category = req.GET.get('cat')) print(req.GET.get('cat'), filtr) data = { 'post':filtr, 'enp':user, 'stu':obj, } return render(req, \"categorize.html\", data)","title":"Post Categorization by 011201171"},{"location":"coding_document/#notification-system-by-011201145","text":"There is a notification system which used to notify all kind of activities such as upvoted posts, comment in a post, any club activities and so on. <div class=\"w-4/5 bg-gray-100 mt-8 flex flex-col rounded-2xl px-4 overflow-y-auto\" style=\"height: 50vh;\"> <h3 class=\"w-1/2 h-fit text-xl mt-6 font-bold text-gray-500\">Notification</h3> {% for notis in noti %} <div class=\"w-full mt-4 h-20 bg-gray-300 rounded-xl flex px-6\"> <svg class=\"w-10 h-30 text-gray-800 dark:text-white\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 21\"> <path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"0.9\" d=\"M10 3.464V1.1m0 2.365a5.338 5.338 0 0 1 5.133 5.368v1.8c0 2.386 1.867 2.982 1.867 4.175C17 15.4 17 16 16.462 16H3.538C3 16 3 15.4 3 14.807c0-1.193 1.867-1.789 1.867-4.175v-1.8A5.338 5.338 0 0 1 10 3.464ZM4 3 3 2M2 7H1m15-4 1-1m1 5h1M6.54 16a3.48 3.48 0 0 0 6.92 0H6.54Z\"/> </svg> <div class=\"w-full h-full flex items-center ml-5\"> <h3>{{notis.message}}</h3> </div> </div> {% endfor %} </div> The Django view function \"dashboard\" handles a request to display the user dashboard. It checks for session validation, retrieves notifications for the logged-in user from the database, and includes the notifications in the data passed to the 'dashboard.html' template. This is likely part of a web application where users can view their personalized dashboard with notifications. def dashboard(req, user): if 'validate' in req.session: ... noti = notification.objects.filter(to = __obj) ... data = { ... 'noti': noti, ... } return render(req, 'dashboard.html', data) else: return redirect('login') When a user interact, the system capture the interaction as message and save it to Notification database. For example, when a user upvote a post: message = user.firstName + \" \" + user.lastName + \" has upvoted your post.\" notificat = notification(message = message, to=post_obj.student) notificat.save() This is how the notification system works.","title":"Notification System by 011201145"},{"location":"coding_document/#real-time-chat-system-by-011201171","text":"A user can chat or message any one who are a part of our system. There is a pop-up UI for chat system where available users and previous chats are displayed. <div id=\"pops\" class=\"absolute w-full h-full flex justify-center items-center\" style=\"display: none; background-color: rgba(94, 94, 94, 0.7);\"> <div class=\"w-2/3 h-3/4 flex bg-white rounded-3xl px-5\" style=\"padding-top: 10px;\"> <div class=\"w-1/3 h-full flex flex-col\"> <div class=\"w-full flex justify-center items-center bg-gray-100 rounded-3xl\" style=\"height: 10vh;\"> <p class=\"text-2xl font-bold\">Chats</p> </div> <div id=\"listdiv\" class=\"w-full h-5/6 flex flex-col items-center rounded-2xl\"> {% for sts in all %} {% if sts != user %} <div onclick=\"popmsgg('{{sts.stu_id}}', '{{sts.firstName}}', '{{sts.lastName}}')\" class=\"w-full rounded-2xl mt-4 flex bg-orange-300 items-center px-8\" style=\"height: 6vh;\"> {% if sts.profpic.url != \"\" %} <img src=\"{{sts.profpic.url}}\" alt=\"\" class=\"object-cover rounded-full w-12 h-12\" style=\"margin-right: 1vh;\"> {% else %} <img src=\"\" alt=\"\" class=\"object-cover rounded-full w-12 h-12 bg-black\" style=\"margin-right: 1vh;\"> {% endif %} <p class=\"ml-4\">{{sts.firstName|add:\" \"|add:sts.lastName}}</p> </div> {% endif %} {% endfor %} </div> </div> <div class=\"w-2/3 h-full flex\"> <div class=\"w-full h-full flex flex-col px-4\" style=\"padding-bottom: 3vh;\"> <div class=\"w-full bg-gray-100 flex flex-col justify-center px-8 rounded-2xl\" style=\"height: 8vh;\"> <p class=\"text-xl\" id=\"nn\"></p> <p>Active now</p> </div> <div class=\"w-full h-full flex flex-col\" style=\"padding: 2vh 0 0 0;\"> <div id=\"showmsg\" class=\"w-full flex flex-col overflow-y-auto\" style=\"height: 50vh;\"> </div> <div class=\"w-full h-20\"> <div class=\"w-full h-full flex justify-between\"> <input type=\"text\" name=\"msg\" id=\"msgg\" placeholder=\"Enter message\" class=\"flex justify-center w-3/4 h-3/4 rounded-3xl\"> <button class=\"bg-orange-300 rounded-2xl w-1/4 h-3/4 ml-3\" data-ccsrf = '{% csrf_token %}' id=\"sendbtn\" onclick=\"sendd()\" >Send</button> </div> </div> </div> </div> </div> </div> </div> AJAX Implementation for Updating Chat Contacts and Sending Message The below code snippet is providing real time user update. The provided JavaScript code uses the setInterval function to periodically send a GET request to the 'refchat' URL in the Django project. This URL is dynamically generated using the user parameter 'enp'. The received HTML response is then used to update the content of the element with the 'chat' ID on the webpage at one-second intervals. Essentially, this code snippet implements a real-time update mechanism for the chat section on the webpage, refreshing the content every second. setInterval(function() { $.ajax({ type: \"GET\", url: \"{% url 'refchat' user=enp %}\", dataType:'html', success: function(res) { $('#chat').html(res) ; }, }); }, 1000); {% for actib in activ %} {% if actib.stu_id != user.stu_id %} <div class=\"w-full h-14 rounded-2xl mt-4 flex px-8 bg-orange-300 items-center\"> {% if actib.profpic.url != \"\" %} <img src=\"{{actib.profpic.url}}\" alt=\"\" class=\"object-cover rounded-full w-12 h-12\" style=\"margin-right: 1vh;\"> {% else %} <img src=\"\" alt=\"\" class=\"object-cover rounded-full w-12 h-12 bg-black\" style=\"margin-right: 1vh;\"> {% endif %} <h3 class=\"text-md font-md ml-3\">{{actib.firstName}}</h3> </div> {% endif %} {% endfor %} Sending Message Function Using AJAX This code snippet provides real time message sending to another user. The provided JavaScript function 'sendd' is triggered when a user sends a message. It retrieves the message content from the 'msgbox' element, which represents a message input box on the webpage. The CSRF token is also obtained to ensure secure communication. The obtained message content and CSRF token are then sent as POST data to the 'sendmsg' URL in the Django project, which is dynamically generated using the 'enp' user parameter. Upon successful completion, a log message is printed to the console, indicating that the message has been sent successfully. Essentially, this code handles the client-side functionality for sending messages in a real-time chat system. let msgbox = document.getElementById('msgg') ; function sendd() { let ccs = $('[name=csrfmiddlewaretoken]').val(); let __msg = msgbox.value ; msgbox.value = \"\" ; console.log(ccs) ; $.ajax({ type: \"POST\", url: \"{% url 'sendmsg' user=enp %}\", data: { csrfmiddlewaretoken: ccs, tousr : __idd, msg: __msg }, success: function() { console.log(\"Sned successfully\") ; } }); } Backend of Chat System This code snippet provides chat contacts updation. The 'refreshchat' view in the Django project retrieves a user's information using the 'user' parameter, which is dynamically generated. It checks if the user is validated by checking the presence of the 'validate' key in the session. If validated, it obtains the student object associated with the user and filters active students. The gathered data, including the active students and the user's information, is then passed to the 'refreshchat.html' template for rendering. In essence, this view facilitates the refreshing of the chat interface by providing information about active users for chat interactions. def refreshchat(req, user): if 'validate' in req.session: stuobj = students.objects.get(stu_id = signing.loads(user, key=key)) filtee = students.objects.filter(active = \"true\") print(stuobj) data = { 'activ': filtee, 'user':stuobj, } return render(req, \"refreshchat.html\", data) The 'sendmsg' view in the Django project handles the process of sending messages between users. It extracts information from the request, such as the sender, receiver, and message content. The view checks if a conversation between the sender and receiver already exists. If it does, a new message is added to the existing conversation; otherwise, a new conversation is created, including the participants, and the message is added to this new conversation. The view returns a status code 204, indicating a successful operation without any content in the HTTP response. In summary, this view facilitates the sending of messages and manages the conversation structure between users. def sendmsg (req, user) : decrp = signing.loads(user, key=key) obj = students.objects.get(stu_id = decrp) toObj = students.objects.get(stu_id = req.POST.get('tousr')) _pk = toObj.stu_id+\"_\"+obj.stu_id _orpk = obj.stu_id+\"_\"+toObj.stu_id print(_pk, _orpk) if conversations.objects.filter(pkk = _pk).exists(): mesg = messages.objects.create(convs=conversations.objects.get(pkk = _pk), sender = obj, msg = req.POST.get('msg')) elif conversations.objects.filter(pkk = _orpk).exists(): mesg = messages.objects.create(convs=conversations.objects.get(pkk = _orpk), sender = obj, msg = req.POST.get('msg')) else: convo = conversations.objects.create(pkk = _pk) convo.userss.add(obj, toObj) mesg = messages.objects.create(convs=convo, sender = obj, msg = req.POST.get('msg')) return HttpResponse(status=204) The 'getmsg' view in the Django project is responsible for retrieving and displaying messages exchanged between two users. It extracts information from the request, such as the sender and receiver, and uses this information to determine the conversation ID (pk1 and pk2). The view checks if a conversation with the given ID exists. If it does, it retrieves all the messages associated with that conversation; otherwise, it sets the 'msgs' variable to an empty string. The retrieved messages, along with other relevant data, are then passed to the 'getmsg.html' template for rendering. In summary, this view handles the retrieval and display of messages in a conversation between two users. def getmsg(req, user): derc= signing.loads(user, key=key) objj = students.objects.get(stu_id = derc) toobj = students.objects.get(stu_id = req.GET.get('to_id')) pk1 = objj.stu_id + \"_\" + toobj.stu_id pk2 = toobj.stu_id+ \"_\"+ objj.stu_id if conversations.objects.filter(pkk = pk1).exists(): msgs = messages.objects.filter(convs = conversations.objects.get(pkk = pk1)) elif conversations.objects.filter(pkk = pk2).exists(): msgs = messages.objects.filter(convs = conversations.objects.get(pkk = pk2)) else: msgs = \"\" data = { \"enp\": user, \"user\": objj, \"msgs\":msgs, } return render(req, 'getmsg.html', data) Thats the overall chatting system mechanism.","title":"Real-time Chat System by 011201171"},{"location":"coding_document/#university-notice-panel-by-011203010","text":"Notification Panel is one of the key features in our system. We have implemented the feature by using Web Scrapping . Here Python beautifulSoup module was implemented. The provided HTML code represents a dynamic list of hyperlinks ('a' elements) displayed within a container. It utilizes the Django template language with a for loop to iterate through pairs of links and corresponding headings provided by the 'zip' variable. For each iteration, it generates a div element with a specific style, containing a hyperlink with the associated URL and text. <div class=\"w-full h-full flex flex-col overflow-y-auto bg-gray-100 mt-3 rounded-2xl ml-3 px-10\"> {% for link, head in zip %} <div class=\"mt-4 rounded-xl h-20 w-full bg-orange-100 text-2xl flex items-center px-20\" style=\"height: 10vh;\"> <a href=\"{{link}}\" target=\"_blank\" class=\"h-full\">{{head}}</a> </div> {% endfor %} </div> Backend The provided Django view function, named 'notice', fetches the latest notices from the UIU website. It uses the requests library to retrieve content from multiple pages on the UIU notices section. The BeautifulSoup library is then employed to parse the HTML content and extract relevant information such as notice headlines and corresponding links. The extracted data is zipped together into a 'zipit' variable, which is then passed to the 'notice.html' template along with user and additional data. In the template, this information is used to dynamically generate a list of clickable notice headlines, each linked to its respective notice page on the UIU website. The 'alls' variable appears to retrieve all student objects from the database, but its usage is not clear in this context. def notice(req, user): dumm = signing.loads(user, key=key) obj = students.objects.get(stu_id = dumm) noticee = [] linkss = [] for i in range(0, 3): reqs = requests.get(\"https://www.uiu.ac.bd/notices/page/\"+str(i)) soup = BeautifulSoup(reqs.content, \"html.parser\") for links in soup.find_all(\"article\"): headrs = links.find('header') h2 = headrs.find(\"h2\") a = h2.find(\"a\") # print(a.get(\"href\")) linkss.append(a.get(\"href\")) noticee.append(h2.text) zipit = zip(linkss, noticee) print(zipit) alls = students.objects.all() data = { 'user':obj, 'enp':user, 'zip':zipit, 'all': alls, } return render(req, \"notice.html\", data)","title":"University Notice Panel by 011203010"},{"location":"coding_document/#club-management-by-011201195","text":"Club management feature is the unique feature of our project. Here a user can create and manage clubs. For implementing the feature we have create a window where all clubs will be displayed and users can access them through the window. <div class=\"w-full h-full bg-gray-100 flex flex-col px-20\"> <div class=\"w-full h-20 flex justify-end items-center\"> <button onclick=\"ppup()\" class=\" mt-5 w-1/5 h-3/4 bg-orange-300 flex justify-center items-center rounded-2xl text-md font-bold\"> <svg class=\"w-6 h-6 text-gray-800 dark:text-white\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 20 20\"> <path d=\"M9.546.5a9.5 9.5 0 1 0 9.5 9.5 9.51 9.51 0 0 0-9.5-9.5ZM13.788 11h-3.242v3.242a1 1 0 1 1-2 0V11H5.304a1 1 0 0 1 0-2h3.242V5.758a1 1 0 0 1 2 0V9h3.242a1 1 0 1 1 0 2Z\"/> </svg> <h3 class=\"ml-5\">Create Club</h3> </button> </div> <div class=\"w-full h-full flex flex-col overflow-y-auto mt-3\"> <div class=\"w-3/4 h-fit flex flex-col mb-5\"> <h3 class=\"text-3xl font-bold\">Clubs</h3> <h3 class=\"text-md \">Manage and access all of your clubs from here.</h3> </div> {% for c in club %} <div class=\"w-3/4 mt-6 flex items-center px-20 rounded-2xl h-1/5 bg-gray-300\"> <img src=\"\" alt=\"\" class=\"rounded-full bg-orange-300\" style=\"width: 150px ; height: 150px;\"> <div class=\"w-2/3 h-full flex justify-center flex-col ml-8\"> <h3 class=\"text-4xl font-bold\">{{c.clubname}}</h3> <h3>{{c.purpose}}</h3> </div> {% if c.adminid == obj %} <a id=\"{{c.clubname}}\" href=\"{% url 'cdash' user=enp club=c.clubname %}\" class=\"w-1/6 h-1/3 ml-8 flex justify-center items-center text-2xl text-white rounded-2xl\" style=\"background-color: blue;\">Enter</a> {% else %} <a id=\"{{c.clubname}}\" href=\"{% url 'approval' user=enp club=c.clubname %}\" class=\"w-1/6 h-1/3 bg-green-500 ml-8 flex justify-center items-center text-2xl text-white rounded-2xl\">Join</a> {% endif %} </div> {% endfor %} </div> </div> Moreover, a user can create a club. The form is designed to provide essential details for creating a club, and it includes client-side interactivity, such as enabling/disabling certain fields based on the user's selection of admin type. <div id=\"club\" class=\"absolute w-full h-full flex flex-col items-center\" style=\"display: none;\"> <div class=\"bg-white rounded-xl mt-10 px-20 flex flex-col items-center\" style=\"width: 50%; height: 80%; margin-left: 25%;\"> <h3 class=\"text-3xl font-bold mt-5 mb-1\">Create Your Club</h3> <h3>Give information of the club below</h3> <div class=\"w-full h-full mt-20\"> <form class=\"w-full h-full flex\" method=\"POST\" action=\"{% url 'addclub' user=enp %}\"> {% csrf_token %} <div class=\"w-1/2 h-full flex flex-col\" > <label for=\"cname\">Club name</label> <input type=\"text\" class=\"rounded-xl\" name=\"cname\" id=\"cname\" placeholder=\"Enter Club Name\"> <label class=\"mt-4\" for=\"ctype\"> Choose type</label> <select name=\"ctype\" class=\"rounded-xl\" id=\"ctype\"> <option value=\"sports\">Sports</option> <option value=\"cultural\">Cultural</option> <option value=\"education\">Education</option> <option value=\"robotics\">Robotics</option> <option value=\"contest\">Contest</option> </select> <label class=\"mt-4\" for=\"purpose\">Club purpose</label> <textarea class=\"text-md rounded-xl\" name=\"purpose\" id=\"purpose\" cols=\"10\" rows=\"6\" style=\"resize: none;\"></textarea> <label class=\"mt-4\" for=\"rules\">Rules and Regulations</label> <textarea class=\"text-md rounded-xl\" name=\"rules\" id=\"rules\" cols=\"10\" rows=\"6\" style=\"resize: none;\"></textarea> </div> <div class=\"w-1/2 h-full flex flex-col\" style=\"margin-left: 4%;\"> <div class=\"w-full flex flex-col h-fit text-xl \"> <label for=\"\" >Who are you?</label> <div class=\"flex w-full items-center\"> <input type=\"radio\" onclick=\"ad()\" name=\"admin\" id=\"admin\" value=\"Admin\" checked> <label for=\"admin\" class=\"ml-1\">Admin</label> <input type=\"radio\" onclick=\"notad()\" class=\"ml-5\" name=\"admin\" id=\"nadmin\" value=\"Not Admin\"> <label for=\"admin\" class=\"ml-1\">Not admin</label> </div> </div> <label for=\"name\" class=\"mt-4\">Admin name</label> <input class=\"rounded-xl\" type=\"text\" name=\"adminname\" id=\"name\" placeholder=\"Admin Name\" disabled> <label for=\"id\" class=\"mt-4\">Admin email/Student ID</label> <input class=\"rounded-xl\" type=\"text\" name=\"adminmail\" id=\"id\" placeholder=\"Admin email or Student ID\" disabled> <label for=\"accep\" class=\"font-bold mt-4\">Are you agree with us?</label> <div class=\"w-fit h-fit flex mt-2\"> <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"> <path d=\"M11,16.4l-4.7-4.7l1.4-1.4l3.3,3.3l8.4-8.4C17.5,3.3,14.9,2,12,2C6.5,2,2,6.5,2,12s4.5,10,10,10s10-4.5,10-10 c0-1.9-0.5-3.6-1.4-5.1L11,16.4z\"></path> </svg> <h3 class=\"ml-2\">The club is not for commercial purposes.</h3> </div> <div class=\"w-fit h-fit flex mt-2\"> <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"> <path d=\"M11,16.4l-4.7-4.7l1.4-1.4l3.3,3.3l8.4-8.4C17.5,3.3,14.9,2,12,2C6.5,2,2,6.5,2,12s4.5,10,10,10s10-4.5,10-10 c0-1.9-0.5-3.6-1.4-5.1L11,16.4z\"></path> </svg> <h3 class=\"ml-2\">Try to keep maintain a good bonding among members</h3> </div> <div class=\"w-fit h-fit flex mt-2\"> <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"> <path d=\"M11,16.4l-4.7-4.7l1.4-1.4l3.3,3.3l8.4-8.4C17.5,3.3,14.9,2,12,2C6.5,2,2,6.5,2,12s4.5,10,10,10s10-4.5,10-10 c0-1.9-0.5-3.6-1.4-5.1L11,16.4z\"></path> </svg> <h3 class=\"ml-2\">Any kind of vulgar content should not be allowed.</h3> </div> <div class=\"w-fit h-fit flex mt-2\"> <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"> <path d=\"M11,16.4l-4.7-4.7l1.4-1.4l3.3,3.3l8.4-8.4C17.5,3.3,14.9,2,12,2C6.5,2,2,6.5,2,12s4.5,10,10,10s10-4.5,10-10 c0-1.9-0.5-3.6-1.4-5.1L11,16.4z\"></path> </svg> <h3 class=\"ml-2\">Check the members identity before approval.</h3> </div> <div class=\"w-fit h-fit flex mt-2 items-center\"> <input type=\"checkbox\" name=\"agree\" id=\"\"> <h3 class=\"ml-2\">I am agree with the conditions.</h3> </div> <div class=\"w-full h-fit flex justify-end px-1 mt-8\"> <input class=\"w-full h-14 bg-green-500 flex justify-center items-center\" type=\"submit\" name=\"sub\" id=\"\" value=\"Create Group\"> </div> </div> </form> </div> </div> </div> Backend The createClub view function is an integral part of a Django web application, responsible for managing the creation of clubs within the system. It first checks whether the user is authenticated by verifying the presence of the 'validate' key in the session. Upon receiving a POST request, indicating the submission of a form, the function extracts essential details such as the club name, type, purpose, rules, and the type of administrator (admin or non-admin). Depending on the admin type, it determines the admin's name and object. Subsequently, a new club object is created with the provided information and stored in the database. The function then redirects the user to the 'club' page, ensuring a seamless user experience in club creation within the web application. def createClub(req, user): if 'validate' in req.session: derc = signing.loads(user, key=key) obj = students.objects.get(stu_id = derc) if req.method == \"POST\": cname = req.POST['cname'] ctype = req.POST['ctype'] purpose = req.POST['purpose'] rules = req.POST['rules'] admin = req.POST['admin'] print(admin) if admin == 'Admin': a_name = obj.firstName + \" \" + obj.lastName a_obj = obj else: a_name = req.POST['adminname'] a_obj = students.objects.get(stu_id = req.POST['adminmail']) clu = clubs(clubname = cname, clubtype = ctype, purpose = purpose, rules = rules, adminname = a_name, adminid = a_obj) clu.save() return redirect('club', user) else: return redirect('login') A user can access to particular group if he/she is approved by club admin. For that a user must have to send a request to the club. The club admin review it and approve/decline it. The clubApprove view function plays a crucial role in handling club approval within a Django web application. It first checks the user's authentication status by verifying the presence of the 'validate' key in the session. Upon validation, the function retrieves essential information, including the targeted club and the current user. It then checks whether the user is the administrator of the club. If so, the approval status is set to \"Enter\". Otherwise, it is marked as \"Pending\". A new club approval entry is created with the club, student, status, and admin information, and it is saved in the database. Finally, the user is redirected to the 'club' page, ensuring a smooth flow in managing club approvals within the web application. def clubApprove(req, user, club): if 'validate' in req.session: clubd = clubs.objects.get(clubname = club) student = students.objects.get(stu_id = signing.loads(user, key=key)) admin = clubd.adminid if admin == student: status = \"Enter\" else: status = \"Pending\" clubapprv = clubApproval(clubid = clubd, studentss = student, status = status, admin = admin) clubapprv.save() return redirect('club', user=user) else: return redirect('login')","title":"Club Management by 011201195"},{"location":"coding_document/#club-dashboard-by-011201195-and-011201148","text":"When a user enters into a club he/she can see the posts regarding a club. Moreover, the upcoming events are also displayed there. So a user can easily interact with the events. For club admin there will be a scetion from where he/she can manage the approval requests. Club Posts <div class=\"w-full h-full flex \"> <div class=\"w-2/3 h-full flex flex-col\"> <img src=\"{% static 'img/uiu.jpg' %}\" alt=\"\" class=\"mt-5 object-cover bg-center w-full h-1/4 rounded-2xl\"> <h3 class=\"w-full text-3xl font-bold mt-8 ml-8 bg-orange-100\">All Posts</h3> <div class=\"w-full h-3/4 mt-5 flex flex-col items-center\" style=\"padding: 0 20vh 0 20vh\"> <div class=\"flex w-full justify-center items-center rounded-xl bg-gray-100\" style=\"height: 8vh;\"> {% if obj.profpic.url != \"\" %} <img src=\"{{obj.profpic.url}}\" alt=\"\" class=\"object-cover rounded-full w-12 h-12\" style=\"margin-right: 1vh;\"> {% else %} <img src=\"\" alt=\"\" class=\"object-cover rounded-full w-12 h-12 bg-black\" style=\"margin-right: 1vh;\"> {% endif %} <button class=\"w-2/3 ml-3 pl-8 text-gray-300 bg-transparent flex items-center rounded-2xl\" style=\"height: 5vh; border: 1px solid #0c0c0ccc\" onclick=\"popup()\">Share your thoughts</button> </div> {% for posts in cpost %} <div class=\"w-full h-fit flex flex-col rounded-2xl bg-orange-100 px-8 mt-6 mb-2\"> <div class=\"w-full h-20 flex items-center\"> {% if posts.student.profpic.url != \"\" %} <img src=\"{{posts.student.profpic.url}}\" alt=\"\" class=\"object-cover rounded-full w-12 h-12\" style=\"margin-right: 1vh;\"> {% else %} <img src=\"\" alt=\"\" class=\"object-cover rounded-full w-12 h-12 bg-black\" style=\"margin-right: 1vh;\"> {% endif %} <div class=\"w-2/3 h-fit flex flex-col\"> <h3 class=\"ml-2 text-md font-bold\">{{posts.student.firstName|add:\" \"|add:posts.student.lastName}}</h3> <h3 class=\"ml-2\">{{posts.student.batch}}</h3> </div> </div> <div class=\"w-full h-fit mt-2 mb-6\"> <p>{{posts.texts}}</p> </div> <div class=\"w-full h-10 flex mb-5 justify-center items-center\"> <div class=\"w-1/2 h-full flex\"> <button id=\"{{posts.iid}}\" data-clubid = \"{{clbname}}\" data-csrf='{% csrf_token %}' data-student=\"{{enp}}\" data-post=\"{{posts.iid}}\" class=\"vote w-full h-full flex items-center justify-center rounded-2xl hover:text-orange-500 hover:font-bold focus:bg-orange-300\"> <svg class=\"w-6 h-6 text-gray-800 dark:text-white\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 20\"> <path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"0.9\" d=\"M4.008 8.714c1-.097 1.96-.45 2.792-1.028a25.112 25.112 0 0 0 4.454-5.72 1.8 1.8 0 0 1 .654-.706 1.742 1.742 0 0 1 1.65-.098 1.82 1.82 0 0 1 .97 1.128c.075.248.097.51.065.767l-1.562 4.629M4.008 8.714H1v9.257c0 .273.106.535.294.728a.99.99 0 0 0 .709.301h1.002a.99.99 0 0 0 .71-.301c.187-.193.293-.455.293-.728V8.714Zm8.02-1.028h4.968c.322 0 .64.08.925.232.286.153.531.374.716.645a2.108 2.108 0 0 1 .242 1.883l-2.36 7.2c-.288.813-.48 1.354-1.884 1.354-2.59 0-5.39-1.06-7.504-1.66\"/> </svg> <h3 class=\"ml-2\">Upvote</h3> </button> </div> <div class=\"w-1/2 h-full\"> <button class=\"w-full h-full flex justify-center items-center hover:text-orange-500\"> <svg class=\"w-6 h-6 text-gray-800 dark:text-white\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 18\"> <path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"0.9\" d=\"M5 5h5M5 8h2m6-3h2m-5 3h6m2-7H2a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h3v5l5-5h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1Z\"/> </svg> <h3 class=\"ml-2\">Comment</h3> </button> </div> </div> </div> {% endfor %} </div> </div> Approval Management Section <div class=\"w-1/3 h-full flex flex-col\"> <div class=\"h-1/2 w-full flex\"> <div class=\"flex flex-col w-1/2 h-full overflow-y-auto\"> <h3 class=\"text-xl font-bold mt-8 ml-8\">All members</h3> {% for join in joined%} <div class=\"mt-1 w-full h-fit flex flex-col px-8\"> <div class=\"mt-3 w-full flex items-center\" style=\"height: 7vh;\"> {% if join.studentss.profpic.url != \"\" %} <img src=\"{{join.studentss.profpic.url}}\" alt=\"\" class=\"object-cover rounded-full w-12 h-12\" style=\"margin-right: 1vh;\"> {% else %} <img src=\"\" alt=\"\" class=\"object-cover rounded-full w-12 h-12 bg-black\" style=\"margin-right: 1vh;\"> {% endif %} <h3 class=\"ml-5\">{{join.studentss.firstName|add:\" \"|add:join.studentss.lastName}}</h3> </div> </div> {% endfor %} </div> <div class=\"flex flex-col w-1/2 h-full overview-y-auto\"> <h3 class=\"text-xl font-bold mt-8 ml-8\">Pending Requests</h3> {% for pend in pendings %} <div class=\"mt-3 w-full h-fit flex justify-center items-center px-8\"> <div class=\" w-full flex items-center\" style=\"height: 7vh;\"> {% if pend.studentss.profpic.url != \"\" %} <img src=\"{{pend.studentss.profpic.url}}\" alt=\"\" class=\"object-cover rounded-full w-12 h-12\" style=\"margin-right: 1vh;\"> {% else %} <img src=\"\" alt=\"\" class=\"object-cover rounded-full w-12 h-12 bg-black\" style=\"margin-right: 1vh;\"> {% endif %} <h3 class=\"ml-3\">{{pend.studentss.firstName}}</h3> </div> <a class=\"px-2 bg-orange-100\" href=\"{% url 'doapprove' club=pend.clubid.clubname student=pend.studentss.stu_id %}\">Approve</a> </div> {% endfor %} </div> </div> Events Section <div class=\"h-1/2 w-full flex flex-col\"> <div class=\"w-full px-8 flex items-center justify-between\" style=\"height: 7vh;\"> <h3 class=\"h-fit text-xl font-bold\">Upcoming Events</h3> <button onclick=\"popevent()\" id=\"hover\" class=\"flex w-1/3 h-1/2 justify-center items-center\" style=\"margin-left: 13vh; color: rgb(19, 22, 199);\"> Create new event </button> </div> <div class=\"w-full h-full flex flex-col px-8 mt-3 overflow-y-auto\"> {% for eve in events %} <div class=\"w-full h-1/2 flex flex-col px-6 shadow-2xl rounded-xl\"> <img src=\"{{ eve.bannerImg.url }}\" alt=\"\" class=\"object-cover w-full bg-white mt-2 rounded-2xl\" style=\"height:5vh;\"> <h3 class=\"font-bold text-3xl mt-2\" style=\"color: gray;\">{{eve.name}}</h3> <div class=\"w-full h-1/3 flex justify-between mt-1\" style=\"color: rgb(109, 109, 109);\"> <div class=\"flex w-fit h-fit items-center\"> <label for=\"sd\" class=\"font-bold text-xl\">Start:</label> <h3 class=\"ml-2\">{{eve.stime}}</h3> </div> <div class=\"flex items-center w-fit h-fit\"> <label for=\"ed\" class=\"font-bold text-xl\">End:</label> <h3 class=\"ml-2\">{{eve.etime}}</h3> </div> </div> <div class=\"flex w-full h-1/2 justify-end\" style=\"margin-bottom: 2vh;\"> <button onclick=\"viewdetails('{{eve.name}}')\" class=\"w-1/2 h-full rounded-xl justify-center items-center text-white text-xl\" style=\"background-color: rgb(40, 77, 110);\">View Details</button> </div> </div> Event Creation Backend def event(req, user, club): print(club) if 'validate' in req.session and req.method == \"POST\": if 'img' in req.FILES: bannerr = req.FILES['img'] else: bannerr = \"\" print(bannerr) name = req.POST['ename'] cat = req.POST['cate'] clubss = clubs.objects.get(clubname = club) studentss = students.objects.get(stu_id = signing.loads(user, key=key)) stime = req.POST['sdate'] etime = req.POST['edate'] details = req.POST['details'] _vent = eevent(bannerImg = bannerr, name=name, cat=cat, club=clubss, admin = studentss, stime = stime, etime = etime, details = details) _vent.save() members = clubApproval.objects.filter(clubid = clubss).filter(status = \"Joined\") messg = studentss.firstName + \" \" + studentss.lastName+ \" have announced an event you may interested in.\" for mems in members: noti = notification(message = messg, to = mems.studentss) noti.save() return redirect('cdash', user=user, club=club) else: return redirect('login') Here the posts management, upvoting and commenting were done by id 011201148 . def clubposthandling(req, user, club): if 'validate' in req.session: if req.method == \"POST\": texts = req.POST['texts'] studnt = students.objects.get(stu_id = signing.loads(user, key=key)) clubb = clubs.objects.get(clubname = club) iid = clubb.clubname + \" \" + datetime.now().strftime(\"%d-%m-%Y-%H-%S\") clubposts = clubpost(texts = texts, clubidd = clubb, student = studnt, iid = iid) clubposts.save() return redirect('cdash', user=user, club=club) return HttpResponse(\"Hello\") else: return redirect('login') AJAX implementation in Showing Events details by 011201195 The JavaScript function viewdetails is designed to display event details on a web page. When invoked with a specific event identifier ( str ), it first retrieves the HTML container element with the ID 'details' and sets its display style to \"flex,\" making it visible. Subsequently, an AJAX request is made to the server using the URL associated with the 'vdetails' view in the Django application. The event identifier is included as a parameter in the request. Upon successful execution, the response received from the server, containing the details of the specified event, is injected into the HTML container with the ID 'container'. This dynamic loading of event details enables a seamless user experience without requiring a full page reload. function viewdetails(str) { let eventt = document.getElementById('details') ; eventt.style.display = \"flex\" ; $.ajax({ type: \"GET\", url: \"{% url 'vdetails' user=enp %}\", data: { event: str, }, success: function(res) { $('#container').html(res) ; } }); }","title":"Club Dashboard by 011201195 and 011201148"},{"location":"coding_document/#job-searching-by-011201145","text":"In our system Job searching is also another unique features. Here a user can search jobs and apply for it. Here we have used Web scrapping to fetch the jobs from BDJobs . Using the requests library to fetch the HTML content and BeautifulSoup to parse it. Extracting relevant information (title, company, location, description, apply link) from the HTML. def scrape_bdjobs(): url = \"https://www.bdjobs.com/\" response = requests.get(url) soup = BeautifulSoup(response.content, \"html.parser\") jobs = [] for job_elem in soup.find_all(\"div\", class_=\"job-title\"): title_elem = job_elem.find(\"a\") company_elem = job_elem.find_next(\"div\", class_=\"comp-name-text\") location_elem = job_elem.find_next(\"div\", class_=\"locon\") apply_link = title_elem.get(\"href\") job = Job( title=title_elem.text.strip(), company=company_elem.text.strip(), location=location_elem.text.strip(), apply_link=apply_link, ) jobs.append(job) return jobs The provided HTML template is designed for rendering job listings on a webpage. It utilizes a loop to iterate through a list of job objects and dynamically generates HTML content for each job, including details such as job title, company, location, and a link to apply. The template allows for a clean and organized display of job information on the frontend. <h1>Job Listings</h1> {% for job in job_listings %} <div> <h2>{{ job.title }}</h2> <p>{{ job.company }} - {{ job.location }}</p> <p>{{ job.description }}</p> <a href=\"{{ job.apply_link }}\" target=\"_blank\">Apply Now</a> </div> {% endfor %}","title":"Job Searching by 011201145"},{"location":"coding_document/#user-profile-by-011203010","text":"Users can see their profile to check his/her previous posts and informations. The provided Django view function is for rendering a user profile page. It retrieves the user object based on the provided user ID, loads associated posts and likes data, and then passes this information to the corresponding HTML template profile.html . The template is responsible for displaying the user's profile information, including posts and associated likes, providing a comprehensive view of the user's activity on the platform. Fetching Information def profile(req, user): obj = students.objects.get(stu_id = signing.loads(user, key=key)) pObj = posts.objects.filter(student = obj) like = likes.objects.all() data = { \"user\":obj, 'enp':user, 'post':pObj, 'likes':like, } return render(req, \"profile.html\", data) Frontend functions <div class=\"w-full h-full flex\"> <div class=\"w-1/5 bg-orange-300 flex-col rounded-2xl\" style=\"height: 50vh;\"> <div class=\" mt-10 ml-5 flex justify-center items-center px-20 rounded-full bg-black\" style=\"height: 15vh; width: 15vh; background-image: url(''); background-size: cover; background-position: center; background-repeat: no-repeat;\"> <label for=\"image\" class=\"img mt-10 font-bold mb-2 w-full\"> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-camera-fill\" style=\"margin-right: 9px;\" viewBox=\"0 0 16 16\"> <path d=\"M10.5 8.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z\"/> <path d=\"M2 4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.172a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 9.172 2H6.828a2 2 0 0 0-1.414.586l-.828.828A2 2 0 0 1 3.172 4H2zm.5 2a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm9 2.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0z\"/> </svg> </label> <input type=\"file\" name=\"img\" id=\"image\" style=\"display: none;\"> </div> <div class=\"mt-4 ml-5 w-full h-fit flex flex-col font-bold\"> <p class=\"text-2xl\">{{user.firstName|add:\" \"|add:user.lastName}}</p> <p class=\"text-md\">{{user.stu_id}}</p> </div> <div class=\"mt-10 ml-5 w-full h-fit flex flex-col \"> <p>ID: {{user.batch}}</p> <p>Department: {{user.dept}}</p> <p>Phone number: {{user.phone_number}}</p> </div> </div> <div class=\"w-4/5 h-full px-20 flex flex-col\"> <p class=\"text-2xl font-bold bg-gray-100 flex items-center\" style=\"height: 4vh;\">Your Posts</p> <div class=\"overflow-y-auto w-full pr-10\" style=\"height: 82vh;\"> {% for posts in post %} <div class=\"w-full h-fit flex flex-col rounded-2xl bg-orange-100 px-8 mt-6 mb-5\"> <div class=\"w-full h-20 flex items-center\"> <img src=\"\" alt=\"\" class=\"w-12 h-12 rounded-full object-cover\"> <div class=\"w-2/3 h-fit flex flex-col\"> <h3 class=\"ml-2 text-md font-bold\">{{posts.student.firstName|add:\" \"|add:posts.student.lastName}}</h3> <div class=\"ml-2 w-full h-fit flex items-center\"> <h3 class=\"\">{{posts.student.stu_id}}</h3> <div class=\"ml-2 w-20 h-fit bg-orange-400 rounded-2xl flex justify-center text-white\"> <p class=\"font-bold\">{{posts.category}}</p> </div> </div> </div> </div> <div class=\"w-full h-fit mt-2 mb-6\"> <p>{{posts.text}}</p> </div> <div class=\"w-full flex flex-col\" style=\"height: 15vh; margin: 0 0 2vh 0;\"> {% for like in likes %} {% if like.post == posts %} <div class=\"w-1/2 flex mt-2 bg-orange-300 rounded-2xl\"> {% if like.user.profpic.url != \"\" %} <img src=\"{{like.user.profpic.url}}\" alt=\"\" class=\"rounded-xl\" style=\"width: 5vh; height: 5vh;\"> {% else %} <img src=\"\" alt=\"\" class=\"bg-black rounded-xl\" style=\"width: 5vh; height: 5vh;\"> {% endif %} <div class=\"ml-2 w-fit flex flex-col\"> <p class=\"font-bold\">{{like.user.firstName|add:\" \"|add:like.user.lastName}}</p> <p>{{like.comment}}</p> </div> </div> {% endif %} {% endfor %} </div> </div> {% endfor %} </div> </div> </div> This is all about the coding part of our system.","title":"User Profile by 011203010"},{"location":"unit_testing/","text":"Our Testcases We have serveral features that need to be tested with positive and negative scenarios, edge cases, and any specific requirements. Our selected features: Authentication System Chat System Creating Club Post Upvoting and Commenting Authentication System by 011201145 Authentication system is used to giving the permission to access his/her information. We need to ensure that the verification system must work well. User Registration A user must have a university mail for creating an account. If other institutes user try to create an account then it will not be accepted. If a user gives the right domain then he/she will be able to do the reigstration. For validating an email will be sent on that particular email of the user. After confirming it the registration will be completed. Here every filed must be filled up otherwise it will give a warning. In the authentication system if a user keep the domain similar to varsity domain and give any value before @ then it does not show any warning and the auto-fill boxes failed to fill with correct information User Login Here user have to use Email and Passowrd for successful validation. If a user gives wrong credentials then it will back to the Login page . Result Login System is working as expected. Registration System is also working properly but there occur a fault when any dummy email with correct domain is given to the system. Chat System by 011201171 Here a user can chat with other users from the user lists. Here everyone can send other messages. We need to ensure a perfect chat system for the user. A user must have to select the other whom he/she want to send message. After sending a message from one side the another will get the message and can start the conversation. We have tested the chat system with messageing between two users. There we dont find any error. In case if a user click on send button without writting anything in message box then it sends the null value to user. Result Chat system is working properly but it can not handle the blank message box. Creating Club by 011201195 Creating club is unique feature of our system. We need to ensure that the any club is perfectly created and managed. The create club form is working well with all types of testcases. Here if the admin email is not in database then an error occured. The club access is tested with many ways. It has no issues. If a user request to join in a club then Pending state appeared and after that if the admin accept it he/she can enter otherwise rejected. Result The club management system is working fine but if the admin email is not in database it fails to create a club. Post Upvoting and Commenting by 011201148 Sharing the thoughts to the community is the main concern of the system here we need to make a proper upvote system as well as comment system for better reach. A user can upvote and comment anything regarding a post. We have test the upvote button by clicking multiple time from one user but it is not increased and passed the test. But if the comment is done with blank box then it does not give any warning. Result The upvoting and comment system is working as expected.","title":"Unit Testing"},{"location":"unit_testing/#our-testcases","text":"We have serveral features that need to be tested with positive and negative scenarios, edge cases, and any specific requirements. Our selected features: Authentication System Chat System Creating Club Post Upvoting and Commenting","title":"Our Testcases"},{"location":"unit_testing/#authentication-system-by-011201145","text":"Authentication system is used to giving the permission to access his/her information. We need to ensure that the verification system must work well. User Registration A user must have a university mail for creating an account. If other institutes user try to create an account then it will not be accepted. If a user gives the right domain then he/she will be able to do the reigstration. For validating an email will be sent on that particular email of the user. After confirming it the registration will be completed. Here every filed must be filled up otherwise it will give a warning. In the authentication system if a user keep the domain similar to varsity domain and give any value before @ then it does not show any warning and the auto-fill boxes failed to fill with correct information User Login Here user have to use Email and Passowrd for successful validation. If a user gives wrong credentials then it will back to the Login page . Result Login System is working as expected. Registration System is also working properly but there occur a fault when any dummy email with correct domain is given to the system.","title":"Authentication System by 011201145"},{"location":"unit_testing/#chat-system-by-011201171","text":"Here a user can chat with other users from the user lists. Here everyone can send other messages. We need to ensure a perfect chat system for the user. A user must have to select the other whom he/she want to send message. After sending a message from one side the another will get the message and can start the conversation. We have tested the chat system with messageing between two users. There we dont find any error. In case if a user click on send button without writting anything in message box then it sends the null value to user. Result Chat system is working properly but it can not handle the blank message box.","title":"Chat System by 011201171"},{"location":"unit_testing/#creating-club-by-011201195","text":"Creating club is unique feature of our system. We need to ensure that the any club is perfectly created and managed. The create club form is working well with all types of testcases. Here if the admin email is not in database then an error occured. The club access is tested with many ways. It has no issues. If a user request to join in a club then Pending state appeared and after that if the admin accept it he/she can enter otherwise rejected. Result The club management system is working fine but if the admin email is not in database it fails to create a club.","title":"Creating Club by 011201195"},{"location":"unit_testing/#post-upvoting-and-commenting-by-011201148","text":"Sharing the thoughts to the community is the main concern of the system here we need to make a proper upvote system as well as comment system for better reach. A user can upvote and comment anything regarding a post. We have test the upvote button by clicking multiple time from one user but it is not increased and passed the test. But if the comment is done with blank box then it does not give any warning. Result The upvoting and comment system is working as expected.","title":"Post Upvoting and Commenting by 011201148"},{"location":"userguide/","text":"How to run UIU-METAMESH To run our software you have to install our software in your system. To do that follow the steps accordingly: Install the latest Python. Install MySQL database. Open a new terminal and type pip install -r requ.txt to install all dependencis. Then type python manage.py makemigrations and python manage.py migrate . Then type python manage.py runserver to open the server and ready to go. How to create a account For registering in our system, Click the signup button to create an account and fill the following fields. Enter your UIU Email Address to be an Authorized user. Once you have completed the signup process you will be redirected to the Landing page. Now enter your Email and Password to Log-In. After login, you will be on the Homepage of our system. Here we have our features like: Profile Information: Users can see their information from the top left of the home page. Chat: The user can initiate chat by clicking on the chat icon. Notification: on the left bottom user can see the reaction notification. Notice: The user can see the real-time notice after clicking on the notice icon. Jobs: Available jobs news will appear here. Active User: on the right side, the user can see the active user. Profile: The user can go to the profile settings by clicking on the profile icon (user image) in the top right corner. Logout: The user can logout by clicking on the logout button. How to Post To publish a post, On the home page users can post by clicking the post (share your thoughts) option. Users can also categorize their posts accordingly by clicking the filter by category button and the dropdown will appear to choose from. Users can react by clicking on the upvote button and share their thoughts by clicking on the Enter a comment field. How to Initiate Chat Click on the chat icon from the top middle section it will redirect to the real-time chat page. On the left side, there is an active user list. Click on the user to whom you want to start a conversation. After clicking on the user icon, the chat window will open on the right side. Now write your message in the enter message section and click the send button to send the message. Now you can see your message and reply from the other end user above. How to see Notice Click on the notice icon, it will redirect you to the notice page where you can see the real-time notices from UIU. Click on the notice to learn more about the specific notice. It will redirect to the UIU website notice panel. How to open/join a club Click on the club icon, it will redirect you to the club page. To create a new club click on the create club button and provide the information. Note: If you want to the admin check the admin box. If you want to make another user admin click on the email box and provide that user email. Now click on the create club button now your club is created. And you are redirected to the club page. Now click the Enter button to enter the club. Here you can post and create events. To post here follow the how-to post steps. To create an event click on the create new event button and provide the information and click on the create event button your event is created. Click on the view details button to view the details of the event. If you are the admin you can allow or reject members on the right side of the club page of the individual clubs. Click on the member under the Pending request section now you can approve or reject the user request to join the club. How to Search Job To see the latest job news click on the Jobs. Now you will be redirected to the jobs page. Here you can see the latest jobs. Click on the job to learn more about a specific job.","title":"User Guide"},{"location":"userguide/#how-to-run-uiu-metamesh","text":"To run our software you have to install our software in your system. To do that follow the steps accordingly: Install the latest Python. Install MySQL database. Open a new terminal and type pip install -r requ.txt to install all dependencis. Then type python manage.py makemigrations and python manage.py migrate . Then type python manage.py runserver to open the server and ready to go.","title":"How to run UIU-METAMESH"},{"location":"userguide/#how-to-create-a-account","text":"For registering in our system, Click the signup button to create an account and fill the following fields. Enter your UIU Email Address to be an Authorized user. Once you have completed the signup process you will be redirected to the Landing page. Now enter your Email and Password to Log-In. After login, you will be on the Homepage of our system. Here we have our features like: Profile Information: Users can see their information from the top left of the home page. Chat: The user can initiate chat by clicking on the chat icon. Notification: on the left bottom user can see the reaction notification. Notice: The user can see the real-time notice after clicking on the notice icon. Jobs: Available jobs news will appear here. Active User: on the right side, the user can see the active user. Profile: The user can go to the profile settings by clicking on the profile icon (user image) in the top right corner. Logout: The user can logout by clicking on the logout button.","title":"How to create a account"},{"location":"userguide/#how-to-post","text":"To publish a post, On the home page users can post by clicking the post (share your thoughts) option. Users can also categorize their posts accordingly by clicking the filter by category button and the dropdown will appear to choose from. Users can react by clicking on the upvote button and share their thoughts by clicking on the Enter a comment field.","title":"How to Post"},{"location":"userguide/#how-to-initiate-chat","text":"Click on the chat icon from the top middle section it will redirect to the real-time chat page. On the left side, there is an active user list. Click on the user to whom you want to start a conversation. After clicking on the user icon, the chat window will open on the right side. Now write your message in the enter message section and click the send button to send the message. Now you can see your message and reply from the other end user above.","title":"How to Initiate Chat"},{"location":"userguide/#how-to-see-notice","text":"Click on the notice icon, it will redirect you to the notice page where you can see the real-time notices from UIU. Click on the notice to learn more about the specific notice. It will redirect to the UIU website notice panel.","title":"How to see Notice"},{"location":"userguide/#how-to-openjoin-a-club","text":"Click on the club icon, it will redirect you to the club page. To create a new club click on the create club button and provide the information. Note: If you want to the admin check the admin box. If you want to make another user admin click on the email box and provide that user email. Now click on the create club button now your club is created. And you are redirected to the club page. Now click the Enter button to enter the club. Here you can post and create events. To post here follow the how-to post steps. To create an event click on the create new event button and provide the information and click on the create event button your event is created. Click on the view details button to view the details of the event. If you are the admin you can allow or reject members on the right side of the club page of the individual clubs. Click on the member under the Pending request section now you can approve or reject the user request to join the club.","title":"How to open/join a club"},{"location":"userguide/#how-to-search-job","text":"To see the latest job news click on the Jobs. Now you will be redirected to the jobs page. Here you can see the latest jobs. Click on the job to learn more about a specific job.","title":"How to Search Job"}]}